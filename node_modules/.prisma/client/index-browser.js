
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.15.0
 * Query Engine version: e51dc3b5a9ee790a07104bec1c9477d51740fe54
 */
Prisma.prismaVersion = {
  client: "2.15.0",
  engine: "e51dc3b5a9ee790a07104bec1c9477d51740fe54"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  login: 'login',
  password: 'password',
  roleId: 'roleId'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.TeacherScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  surname: 'surname',
  userId: 'userId'
});

exports.Prisma.CourseScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  group: 'group'
});

exports.Prisma.StudentScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  surname: 'surname',
  class: 'class',
  program: 'program'
});

exports.Prisma.Teacher_Course_StudentScalarFieldEnum = makeEnum({
  id: 'id',
  teacherId: 'teacherId',
  studentId: 'studentId',
  courseId: 'courseId',
  archived: 'archived',
  subgroup: 'subgroup'
});

exports.Prisma.JournalEntryScalarFieldEnum = makeEnum({
  id: 'id',
  mark: 'mark',
  date: 'date',
  relationId: 'relationId'
});

exports.Prisma.QuaterMarkScalarFieldEnum = makeEnum({
  id: 'id',
  mark: 'mark',
  period: 'period',
  relationId: 'relationId'
});

exports.Prisma.ReplacementScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  entryId: 'entryId'
});

exports.Prisma.ConsultScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  period: 'period',
  year: 'year',
  relationId: 'relationId'
});

exports.Prisma.NoteScalarFieldEnum = makeEnum({
  id: 'id',
  text: 'text',
  period: 'period',
  year: 'year',
  teacherId: 'teacherId',
  courseId: 'courseId'
});

exports.Prisma.LoadScalarFieldEnum = makeEnum({
  id: 'id',
  course: 'course',
  class: 'class',
  program: 'program',
  hours: 'hours'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.Program = makeEnum({
  PP_5: 'PP_5',
  PP_8: 'PP_8',
  OP: 'OP'
});

exports.Period = makeEnum({
  first: 'first',
  second: 'second',
  third: 'third',
  fourth: 'fourth',
  year: 'year'
});

exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Role: 'Role',
  Teacher: 'Teacher',
  Course: 'Course',
  Student: 'Student',
  Teacher_Course_Student: 'Teacher_Course_Student',
  JournalEntry: 'JournalEntry',
  QuaterMark: 'QuaterMark',
  Replacement: 'Replacement',
  Consult: 'Consult',
  Note: 'Note',
  Load: 'Load'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
