
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';


/**
 * Model User
 */

export type User = {
  id: number
  login: string
  password: string
  roleId: number
}

/**
 * Model Role
 */

export type Role = {
  id: number
  name: string
}

/**
 * Model Teacher
 */

export type Teacher = {
  id: number
  name: string | null
  surname: string | null
  userId: number | null
}

/**
 * Model Course
 */

export type Course = {
  id: number
  name: string | null
  group: boolean
}

/**
 * Model Student
 */

export type Student = {
  id: number
  name: string | null
  surname: string | null
  class: number | null
  program: Program | null
}

/**
 * Model Teacher_Course_Student
 */

export type Teacher_Course_Student = {
  id: number
  teacherId: number
  studentId: number
  courseId: number
  subgroup: number | null
}

/**
 * Model JournalEntry
 */

export type JournalEntry = {
  id: number
  mark: string
  date: Date
  relationId: number
}

/**
 * Model QuaterMark
 */

export type QuaterMark = {
  id: number
  mark: string
  period: Period
  relationId: number
}

/**
 * Model Replacement
 */

export type Replacement = {
  id: number
  date: Date
  entryId: number
}

/**
 * Model Consult
 */

export type Consult = {
  id: number
  date: Date
  period: Period
  year: number
  relationId: number
}

/**
 * Model Note
 */

export type Note = {
  id: number
  text: string
  period: Period
  year: number
  teacherId: number
  courseId: number
}

/**
 * Model Load
 */

export type Load = {
  id: number
  course: number
  class: number
  program: Program
  hours: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const Program: {
  PP_5: 'PP_5',
  PP_8: 'PP_8',
  OP: 'OP'
};

export type Program = (typeof Program)[keyof typeof Program]


export const Period: {
  first: 'first',
  second: 'second',
  third: 'third',
  fourth: 'fourth',
  year: 'year'
};

export type Period = (typeof Period)[keyof typeof Period]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate;

  /**
   * `prisma.teacher_Course_Student`: Exposes CRUD operations for the **Teacher_Course_Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teacher_Course_Students
    * const teacher_Course_Students = await prisma.teacher_Course_Student.findMany()
    * ```
    */
  get teacher_Course_Student(): Prisma.Teacher_Course_StudentDelegate;

  /**
   * `prisma.journalEntry`: Exposes CRUD operations for the **JournalEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JournalEntries
    * const journalEntries = await prisma.journalEntry.findMany()
    * ```
    */
  get journalEntry(): Prisma.JournalEntryDelegate;

  /**
   * `prisma.quaterMark`: Exposes CRUD operations for the **QuaterMark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QuaterMarks
    * const quaterMarks = await prisma.quaterMark.findMany()
    * ```
    */
  get quaterMark(): Prisma.QuaterMarkDelegate;

  /**
   * `prisma.replacement`: Exposes CRUD operations for the **Replacement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Replacements
    * const replacements = await prisma.replacement.findMany()
    * ```
    */
  get replacement(): Prisma.ReplacementDelegate;

  /**
   * `prisma.consult`: Exposes CRUD operations for the **Consult** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Consults
    * const consults = await prisma.consult.findMany()
    * ```
    */
  get consult(): Prisma.ConsultDelegate;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate;

  /**
   * `prisma.load`: Exposes CRUD operations for the **Load** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loads
    * const loads = await prisma.load.findMany()
    * ```
    */
  get load(): Prisma.LoadDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.15.0
   * Query Engine version: e51dc3b5a9ee790a07104bec1c9477d51740fe54
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Teacher: 'Teacher',
    Course: 'Course',
    Student: 'Student',
    Teacher_Course_Student: 'Teacher_Course_Student',
    JournalEntry: 'JournalEntry',
    QuaterMark: 'QuaterMark',
    Replacement: 'Replacement',
    Consult: 'Consult',
    Note: 'Note',
    Load: 'Load'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model User
   */


  export type AggregateUser = {
    count: UserCountAggregateOutputType | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
    roleId: number
  }

  export type UserSumAggregateOutputType = {
    id: number
    roleId: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    login: string | null
    password: string | null
    roleId: number
  }

  export type UserMaxAggregateOutputType = {
    id: number
    login: string | null
    password: string | null
    roleId: number
  }

  export type UserCountAggregateOutputType = {
    id: number
    login: number | null
    password: number | null
    roleId: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    login?: true
    password?: true
    roleId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    login?: true
    password?: true
    roleId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    login?: true
    password?: true
    roleId?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
    [P in keyof T & keyof AggregateUser]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }



  export type UserSelect = {
    id?: boolean
    login?: boolean
    password?: boolean
    role?: boolean | RoleArgs
    roleId?: boolean
    teacher?: boolean | TeacherArgs
  }

  export type UserInclude = {
    role?: boolean | RoleArgs
    teacher?: boolean | TeacherArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'role'
        ? RoleGetPayload<S['include'][P]> :
        P extends 'teacher'
        ? TeacherGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'role'
        ? RoleGetPayload<S['select'][P]> :
        P extends 'teacher'
        ? TeacherGetPayload<S['select'][P]> | null : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find the first User that matches the filter.
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    role<T extends RoleArgs = {}>(args?: Subset<T, RoleArgs>): CheckSelect<T, Prisma__RoleClient<Role | null>, Prisma__RoleClient<RoleGetPayload<T> | null>>;

    teacher<T extends TeacherArgs = {}>(args?: Subset<T, TeacherArgs>): CheckSelect<T, Prisma__TeacherClient<Teacher | null>, Prisma__TeacherClient<TeacherGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: XOR<UserUncheckedCreateInput, UserCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: XOR<UserUncheckedUpdateInput, UserUpdateInput>
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: XOR<UserUncheckedUpdateManyInput, UserUpdateManyMutationInput>
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: XOR<UserUncheckedCreateInput, UserCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<UserUncheckedUpdateInput, UserUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Role
   */


  export type AggregateRole = {
    count: RoleCountAggregateOutputType | null
    avg: RoleAvgAggregateOutputType | null
    sum: RoleSumAggregateOutputType | null
    min: RoleMinAggregateOutputType | null
    max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number
  }

  export type RoleSumAggregateOutputType = {
    id: number
  }

  export type RoleMinAggregateOutputType = {
    id: number
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number | null
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs = {
    /**
     * Filter which Role to aggregate.
    **/
    where?: RoleWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Roles to fetch.
    **/
    orderBy?: Enumerable<RoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
    [P in keyof T & keyof AggregateRole]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }



  export type RoleSelect = {
    id?: boolean
    name?: boolean
    users?: boolean | UserFindManyArgs
  }

  export type RoleInclude = {
    users?: boolean | UserFindManyArgs
  }

  export type RoleGetPayload<
    S extends boolean | null | undefined | RoleArgs,
    U = keyof S
      > = S extends true
        ? Role
    : S extends undefined
    ? never
    : S extends RoleArgs | RoleFindManyArgs
    ?'include' extends U
    ? Role  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'users'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Role ?Role [P]
  : 
          P extends 'users'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : Role
  : Role


  type RoleCountArgs = Merge<
    Omit<RoleFindManyArgs, 'select' | 'include'> & {
      select?: RoleCountAggregateInputType | true
    }
  >

  export interface RoleDelegate {
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RoleFindUniqueArgs>(
      args: SelectSubset<T, RoleFindUniqueArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role | null>, Prisma__RoleClient<RoleGetPayload<T> | null>>

    /**
     * Find the first Role that matches the filter.
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RoleFindFirstArgs>(
      args?: SelectSubset<T, RoleFindFirstArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role | null>, Prisma__RoleClient<RoleGetPayload<T> | null>>

    /**
     * Find zero or more Roles that matches the filter.
     * @param {RoleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RoleFindManyArgs>(
      args?: SelectSubset<T, RoleFindManyArgs>
    ): CheckSelect<T, Promise<Array<Role>>, Promise<Array<RoleGetPayload<T>>>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
    **/
    create<T extends RoleCreateArgs>(
      args: SelectSubset<T, RoleCreateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
    **/
    delete<T extends RoleDeleteArgs>(
      args: SelectSubset<T, RoleDeleteArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RoleUpdateArgs>(
      args: SelectSubset<T, RoleUpdateArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RoleDeleteManyArgs>(
      args?: SelectSubset<T, RoleDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Roles.
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RoleUpdateManyArgs>(
      args: SelectSubset<T, RoleUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
    **/
    upsert<T extends RoleUpsertArgs>(
      args: SelectSubset<T, RoleUpsertArgs>
    ): CheckSelect<T, Prisma__RoleClient<Role>, Prisma__RoleClient<RoleGetPayload<T>>>

    /**
     * Count the number of Roles.
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Promise<GetRoleAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RoleClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    users<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * Throw an Error if a Role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Role to fetch.
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * Throw an Error if a Role can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Role to fetch.
    **/
    where?: RoleWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Roles to fetch.
    **/
    orderBy?: Enumerable<RoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Roles.
    **/
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role findMany
   */
  export type RoleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * Filter, which Roles to fetch.
    **/
    where?: RoleWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Roles to fetch.
    **/
    orderBy?: Enumerable<RoleOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
    **/
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
    **/
    skip?: number
    distinct?: Enumerable<RoleScalarFieldEnum>
  }


  /**
   * Role create
   */
  export type RoleCreateArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * The data needed to create a Role.
    **/
    data: XOR<RoleUncheckedCreateInput, RoleCreateInput>
  }


  /**
   * Role update
   */
  export type RoleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * The data needed to update a Role.
    **/
    data: XOR<RoleUncheckedUpdateInput, RoleUpdateInput>
    /**
     * Choose, which Role to update.
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs = {
    data: XOR<RoleUncheckedUpdateManyInput, RoleUpdateManyMutationInput>
    where?: RoleWhereInput
  }


  /**
   * Role upsert
   */
  export type RoleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * The filter to search for the Role to update in case it exists.
    **/
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
    **/
    create: XOR<RoleUncheckedCreateInput, RoleCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<RoleUncheckedUpdateInput, RoleUpdateInput>
  }


  /**
   * Role delete
   */
  export type RoleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
    /**
     * Filter which Role to delete.
    **/
    where: RoleWhereUniqueInput
  }


  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs = {
    where?: RoleWhereInput
  }


  /**
   * Role without action
   */
  export type RoleArgs = {
    /**
     * Select specific fields to fetch from the Role
    **/
    select?: RoleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: RoleInclude | null
  }



  /**
   * Model Teacher
   */


  export type AggregateTeacher = {
    count: TeacherCountAggregateOutputType | null
    avg: TeacherAvgAggregateOutputType | null
    sum: TeacherSumAggregateOutputType | null
    min: TeacherMinAggregateOutputType | null
    max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type TeacherSumAggregateOutputType = {
    id: number
    userId: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: number
    name: string | null
    surname: string | null
    userId: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: number
    name: string | null
    surname: string | null
    userId: number | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    name: number | null
    surname: number | null
    userId: number | null
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TeacherSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    userId?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    userId?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    userId?: true
    _all?: true
  }

  export type TeacherAggregateArgs = {
    /**
     * Filter which Teacher to aggregate.
    **/
    where?: TeacherWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teachers to fetch.
    **/
    orderBy?: Enumerable<TeacherOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
    [P in keyof T & keyof AggregateTeacher]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }



  export type TeacherSelect = {
    id?: boolean
    name?: boolean
    surname?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    relations?: boolean | Teacher_Course_StudentFindManyArgs
    Note?: boolean | NoteFindManyArgs
  }

  export type TeacherInclude = {
    user?: boolean | UserArgs
    relations?: boolean | Teacher_Course_StudentFindManyArgs
    Note?: boolean | NoteFindManyArgs
  }

  export type TeacherGetPayload<
    S extends boolean | null | undefined | TeacherArgs,
    U = keyof S
      > = S extends true
        ? Teacher
    : S extends undefined
    ? never
    : S extends TeacherArgs | TeacherFindManyArgs
    ?'include' extends U
    ? Teacher  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> | null :
        P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['include'][P]>>  :
        P extends 'Note'
        ? Array < NoteGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Teacher ?Teacher [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> | null :
        P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['select'][P]>>  :
        P extends 'Note'
        ? Array < NoteGetPayload<S['select'][P]>>  : never
  } 
    : Teacher
  : Teacher


  type TeacherCountArgs = Merge<
    Omit<TeacherFindManyArgs, 'select' | 'include'> & {
      select?: TeacherCountAggregateInputType | true
    }
  >

  export interface TeacherDelegate {
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherFindUniqueArgs>(
      args: SelectSubset<T, TeacherFindUniqueArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher | null>, Prisma__TeacherClient<TeacherGetPayload<T> | null>>

    /**
     * Find the first Teacher that matches the filter.
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherFindFirstArgs>(
      args?: SelectSubset<T, TeacherFindFirstArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher | null>, Prisma__TeacherClient<TeacherGetPayload<T> | null>>

    /**
     * Find zero or more Teachers that matches the filter.
     * @param {TeacherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeacherFindManyArgs>(
      args?: SelectSubset<T, TeacherFindManyArgs>
    ): CheckSelect<T, Promise<Array<Teacher>>, Promise<Array<TeacherGetPayload<T>>>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
    **/
    create<T extends TeacherCreateArgs>(
      args: SelectSubset<T, TeacherCreateArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher>, Prisma__TeacherClient<TeacherGetPayload<T>>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDeleteArgs>(
      args: SelectSubset<T, TeacherDeleteArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher>, Prisma__TeacherClient<TeacherGetPayload<T>>>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherUpdateArgs>(
      args: SelectSubset<T, TeacherUpdateArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher>, Prisma__TeacherClient<TeacherGetPayload<T>>>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDeleteManyArgs>(
      args?: SelectSubset<T, TeacherDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherUpdateManyArgs>(
      args: SelectSubset<T, TeacherUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherUpsertArgs>(
      args: SelectSubset<T, TeacherUpsertArgs>
    ): CheckSelect<T, Prisma__TeacherClient<Teacher>, Prisma__TeacherClient<TeacherGetPayload<T>>>

    /**
     * Count the number of Teachers.
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Promise<GetTeacherAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeacherClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    relations<T extends Teacher_Course_StudentFindManyArgs = {}>(args?: Subset<T, Teacher_Course_StudentFindManyArgs>): CheckSelect<T, Promise<Array<Teacher_Course_Student>>, Promise<Array<Teacher_Course_StudentGetPayload<T>>>>;

    Note<T extends NoteFindManyArgs = {}>(args?: Subset<T, NoteFindManyArgs>): CheckSelect<T, Promise<Array<Note>>, Promise<Array<NoteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * Throw an Error if a Teacher can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Teacher to fetch.
    **/
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * Throw an Error if a Teacher can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Teacher to fetch.
    **/
    where?: TeacherWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teachers to fetch.
    **/
    orderBy?: Enumerable<TeacherOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
    **/
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Teachers.
    **/
    distinct?: Enumerable<TeacherScalarFieldEnum>
  }


  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * Filter, which Teachers to fetch.
    **/
    where?: TeacherWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teachers to fetch.
    **/
    orderBy?: Enumerable<TeacherOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
    **/
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
    **/
    skip?: number
    distinct?: Enumerable<TeacherScalarFieldEnum>
  }


  /**
   * Teacher create
   */
  export type TeacherCreateArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * The data needed to create a Teacher.
    **/
    data: XOR<TeacherUncheckedCreateInput, TeacherCreateInput>
  }


  /**
   * Teacher update
   */
  export type TeacherUpdateArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * The data needed to update a Teacher.
    **/
    data: XOR<TeacherUncheckedUpdateInput, TeacherUpdateInput>
    /**
     * Choose, which Teacher to update.
    **/
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs = {
    data: XOR<TeacherUncheckedUpdateManyInput, TeacherUpdateManyMutationInput>
    where?: TeacherWhereInput
  }


  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * The filter to search for the Teacher to update in case it exists.
    **/
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
    **/
    create: XOR<TeacherUncheckedCreateInput, TeacherCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<TeacherUncheckedUpdateInput, TeacherUpdateInput>
  }


  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
    /**
     * Filter which Teacher to delete.
    **/
    where: TeacherWhereUniqueInput
  }


  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs = {
    where?: TeacherWhereInput
  }


  /**
   * Teacher without action
   */
  export type TeacherArgs = {
    /**
     * Select specific fields to fetch from the Teacher
    **/
    select?: TeacherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: TeacherInclude | null
  }



  /**
   * Model Course
   */


  export type AggregateCourse = {
    count: CourseCountAggregateOutputType | null
    avg: CourseAvgAggregateOutputType | null
    sum: CourseSumAggregateOutputType | null
    min: CourseMinAggregateOutputType | null
    max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number
  }

  export type CourseSumAggregateOutputType = {
    id: number
  }

  export type CourseMinAggregateOutputType = {
    id: number
    name: string | null
    group: boolean | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number
    name: string | null
    group: boolean | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    name: number | null
    group: number | null
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    name?: true
    group?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    name?: true
    group?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    name?: true
    group?: true
    _all?: true
  }

  export type CourseAggregateArgs = {
    /**
     * Filter which Course to aggregate.
    **/
    where?: CourseWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Courses to fetch.
    **/
    orderBy?: Enumerable<CourseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
    [P in keyof T & keyof AggregateCourse]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }



  export type CourseSelect = {
    id?: boolean
    name?: boolean
    group?: boolean
    Note?: boolean | NoteFindManyArgs
    relations?: boolean | Teacher_Course_StudentFindManyArgs
  }

  export type CourseInclude = {
    Note?: boolean | NoteFindManyArgs
    relations?: boolean | Teacher_Course_StudentFindManyArgs
  }

  export type CourseGetPayload<
    S extends boolean | null | undefined | CourseArgs,
    U = keyof S
      > = S extends true
        ? Course
    : S extends undefined
    ? never
    : S extends CourseArgs | CourseFindManyArgs
    ?'include' extends U
    ? Course  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'Note'
        ? Array < NoteGetPayload<S['include'][P]>>  :
        P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Course ?Course [P]
  : 
          P extends 'Note'
        ? Array < NoteGetPayload<S['select'][P]>>  :
        P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['select'][P]>>  : never
  } 
    : Course
  : Course


  type CourseCountArgs = Merge<
    Omit<CourseFindManyArgs, 'select' | 'include'> & {
      select?: CourseCountAggregateInputType | true
    }
  >

  export interface CourseDelegate {
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs>(
      args: SelectSubset<T, CourseFindUniqueArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course | null>, Prisma__CourseClient<CourseGetPayload<T> | null>>

    /**
     * Find the first Course that matches the filter.
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs>(
      args?: SelectSubset<T, CourseFindFirstArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course | null>, Prisma__CourseClient<CourseGetPayload<T> | null>>

    /**
     * Find zero or more Courses that matches the filter.
     * @param {CourseFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs>(
      args?: SelectSubset<T, CourseFindManyArgs>
    ): CheckSelect<T, Promise<Array<Course>>, Promise<Array<CourseGetPayload<T>>>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs>(
      args: SelectSubset<T, CourseCreateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs>(
      args: SelectSubset<T, CourseDeleteArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs>(
      args: SelectSubset<T, CourseUpdateArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs>(
      args?: SelectSubset<T, CourseDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Courses.
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs>(
      args: SelectSubset<T, CourseUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs>(
      args: SelectSubset<T, CourseUpsertArgs>
    ): CheckSelect<T, Prisma__CourseClient<Course>, Prisma__CourseClient<CourseGetPayload<T>>>

    /**
     * Count the number of Courses.
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Promise<GetCourseAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CourseClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Note<T extends NoteFindManyArgs = {}>(args?: Subset<T, NoteFindManyArgs>): CheckSelect<T, Promise<Array<Note>>, Promise<Array<NoteGetPayload<T>>>>;

    relations<T extends Teacher_Course_StudentFindManyArgs = {}>(args?: Subset<T, Teacher_Course_StudentFindManyArgs>): CheckSelect<T, Promise<Array<Teacher_Course_Student>>, Promise<Array<Teacher_Course_StudentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * Throw an Error if a Course can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Course to fetch.
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * Throw an Error if a Course can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Course to fetch.
    **/
    where?: CourseWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Courses to fetch.
    **/
    orderBy?: Enumerable<CourseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Courses.
    **/
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course findMany
   */
  export type CourseFindManyArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * Filter, which Courses to fetch.
    **/
    where?: CourseWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Courses to fetch.
    **/
    orderBy?: Enumerable<CourseOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
    **/
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
    **/
    skip?: number
    distinct?: Enumerable<CourseScalarFieldEnum>
  }


  /**
   * Course create
   */
  export type CourseCreateArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * The data needed to create a Course.
    **/
    data: XOR<CourseUncheckedCreateInput, CourseCreateInput>
  }


  /**
   * Course update
   */
  export type CourseUpdateArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * The data needed to update a Course.
    **/
    data: XOR<CourseUncheckedUpdateInput, CourseUpdateInput>
    /**
     * Choose, which Course to update.
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs = {
    data: XOR<CourseUncheckedUpdateManyInput, CourseUpdateManyMutationInput>
    where?: CourseWhereInput
  }


  /**
   * Course upsert
   */
  export type CourseUpsertArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * The filter to search for the Course to update in case it exists.
    **/
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
    **/
    create: XOR<CourseUncheckedCreateInput, CourseCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<CourseUncheckedUpdateInput, CourseUpdateInput>
  }


  /**
   * Course delete
   */
  export type CourseDeleteArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
    /**
     * Filter which Course to delete.
    **/
    where: CourseWhereUniqueInput
  }


  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs = {
    where?: CourseWhereInput
  }


  /**
   * Course without action
   */
  export type CourseArgs = {
    /**
     * Select specific fields to fetch from the Course
    **/
    select?: CourseSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CourseInclude | null
  }



  /**
   * Model Student
   */


  export type AggregateStudent = {
    count: StudentCountAggregateOutputType | null
    avg: StudentAvgAggregateOutputType | null
    sum: StudentSumAggregateOutputType | null
    min: StudentMinAggregateOutputType | null
    max: StudentMaxAggregateOutputType | null
  }

  export type StudentAvgAggregateOutputType = {
    id: number
    class: number | null
  }

  export type StudentSumAggregateOutputType = {
    id: number
    class: number | null
  }

  export type StudentMinAggregateOutputType = {
    id: number
    name: string | null
    surname: string | null
    class: number | null
    program: Program | null
  }

  export type StudentMaxAggregateOutputType = {
    id: number
    name: string | null
    surname: string | null
    class: number | null
    program: Program | null
  }

  export type StudentCountAggregateOutputType = {
    id: number
    name: number | null
    surname: number | null
    class: number | null
    program: number | null
    _all: number
  }


  export type StudentAvgAggregateInputType = {
    id?: true
    class?: true
  }

  export type StudentSumAggregateInputType = {
    id?: true
    class?: true
  }

  export type StudentMinAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    class?: true
    program?: true
  }

  export type StudentMaxAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    class?: true
    program?: true
  }

  export type StudentCountAggregateInputType = {
    id?: true
    name?: true
    surname?: true
    class?: true
    program?: true
    _all?: true
  }

  export type StudentAggregateArgs = {
    /**
     * Filter which Student to aggregate.
    **/
    where?: StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Students to fetch.
    **/
    orderBy?: Enumerable<StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
    [P in keyof T & keyof AggregateStudent]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }



  export type StudentSelect = {
    id?: boolean
    name?: boolean
    surname?: boolean
    class?: boolean
    program?: boolean
    relations?: boolean | Teacher_Course_StudentFindManyArgs
  }

  export type StudentInclude = {
    relations?: boolean | Teacher_Course_StudentFindManyArgs
  }

  export type StudentGetPayload<
    S extends boolean | null | undefined | StudentArgs,
    U = keyof S
      > = S extends true
        ? Student
    : S extends undefined
    ? never
    : S extends StudentArgs | StudentFindManyArgs
    ?'include' extends U
    ? Student  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Student ?Student [P]
  : 
          P extends 'relations'
        ? Array < Teacher_Course_StudentGetPayload<S['select'][P]>>  : never
  } 
    : Student
  : Student


  type StudentCountArgs = Merge<
    Omit<StudentFindManyArgs, 'select' | 'include'> & {
      select?: StudentCountAggregateInputType | true
    }
  >

  export interface StudentDelegate {
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs>(
      args: SelectSubset<T, StudentFindUniqueArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student | null>, Prisma__StudentClient<StudentGetPayload<T> | null>>

    /**
     * Find the first Student that matches the filter.
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs>(
      args?: SelectSubset<T, StudentFindFirstArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student | null>, Prisma__StudentClient<StudentGetPayload<T> | null>>

    /**
     * Find zero or more Students that matches the filter.
     * @param {StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentWithIdOnly = await prisma.student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs>(
      args?: SelectSubset<T, StudentFindManyArgs>
    ): CheckSelect<T, Promise<Array<Student>>, Promise<Array<StudentGetPayload<T>>>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs>(
      args: SelectSubset<T, StudentCreateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs>(
      args: SelectSubset<T, StudentDeleteArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs>(
      args: SelectSubset<T, StudentUpdateArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs>(
      args?: SelectSubset<T, StudentDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Students.
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs>(
      args: SelectSubset<T, StudentUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs>(
      args: SelectSubset<T, StudentUpsertArgs>
    ): CheckSelect<T, Prisma__StudentClient<Student>, Prisma__StudentClient<StudentGetPayload<T>>>

    /**
     * Count the number of Students.
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Promise<GetStudentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StudentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relations<T extends Teacher_Course_StudentFindManyArgs = {}>(args?: Subset<T, Teacher_Course_StudentFindManyArgs>): CheckSelect<T, Promise<Array<Teacher_Course_Student>>, Promise<Array<Teacher_Course_StudentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * Throw an Error if a Student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Student to fetch.
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * Throw an Error if a Student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Student to fetch.
    **/
    where?: StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Students to fetch.
    **/
    orderBy?: Enumerable<StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Students.
    **/
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * Student findMany
   */
  export type StudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * Filter, which Students to fetch.
    **/
    where?: StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Students to fetch.
    **/
    orderBy?: Enumerable<StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
    **/
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
    **/
    skip?: number
    distinct?: Enumerable<StudentScalarFieldEnum>
  }


  /**
   * Student create
   */
  export type StudentCreateArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * The data needed to create a Student.
    **/
    data: XOR<StudentUncheckedCreateInput, StudentCreateInput>
  }


  /**
   * Student update
   */
  export type StudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * The data needed to update a Student.
    **/
    data: XOR<StudentUncheckedUpdateInput, StudentUpdateInput>
    /**
     * Choose, which Student to update.
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs = {
    data: XOR<StudentUncheckedUpdateManyInput, StudentUpdateManyMutationInput>
    where?: StudentWhereInput
  }


  /**
   * Student upsert
   */
  export type StudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * The filter to search for the Student to update in case it exists.
    **/
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
    **/
    create: XOR<StudentUncheckedCreateInput, StudentCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<StudentUncheckedUpdateInput, StudentUpdateInput>
  }


  /**
   * Student delete
   */
  export type StudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
    /**
     * Filter which Student to delete.
    **/
    where: StudentWhereUniqueInput
  }


  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs = {
    where?: StudentWhereInput
  }


  /**
   * Student without action
   */
  export type StudentArgs = {
    /**
     * Select specific fields to fetch from the Student
    **/
    select?: StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: StudentInclude | null
  }



  /**
   * Model Teacher_Course_Student
   */


  export type AggregateTeacher_Course_Student = {
    count: Teacher_Course_StudentCountAggregateOutputType | null
    avg: Teacher_Course_StudentAvgAggregateOutputType | null
    sum: Teacher_Course_StudentSumAggregateOutputType | null
    min: Teacher_Course_StudentMinAggregateOutputType | null
    max: Teacher_Course_StudentMaxAggregateOutputType | null
  }

  export type Teacher_Course_StudentAvgAggregateOutputType = {
    id: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup: number | null
  }

  export type Teacher_Course_StudentSumAggregateOutputType = {
    id: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup: number | null
  }

  export type Teacher_Course_StudentMinAggregateOutputType = {
    id: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup: number | null
  }

  export type Teacher_Course_StudentMaxAggregateOutputType = {
    id: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup: number | null
  }

  export type Teacher_Course_StudentCountAggregateOutputType = {
    id: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup: number | null
    _all: number
  }


  export type Teacher_Course_StudentAvgAggregateInputType = {
    id?: true
    teacherId?: true
    studentId?: true
    courseId?: true
    subgroup?: true
  }

  export type Teacher_Course_StudentSumAggregateInputType = {
    id?: true
    teacherId?: true
    studentId?: true
    courseId?: true
    subgroup?: true
  }

  export type Teacher_Course_StudentMinAggregateInputType = {
    id?: true
    teacherId?: true
    studentId?: true
    courseId?: true
    subgroup?: true
  }

  export type Teacher_Course_StudentMaxAggregateInputType = {
    id?: true
    teacherId?: true
    studentId?: true
    courseId?: true
    subgroup?: true
  }

  export type Teacher_Course_StudentCountAggregateInputType = {
    id?: true
    teacherId?: true
    studentId?: true
    courseId?: true
    subgroup?: true
    _all?: true
  }

  export type Teacher_Course_StudentAggregateArgs = {
    /**
     * Filter which Teacher_Course_Student to aggregate.
    **/
    where?: Teacher_Course_StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teacher_Course_Students to fetch.
    **/
    orderBy?: Enumerable<Teacher_Course_StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: Teacher_Course_StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teacher_Course_Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teacher_Course_Students.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teacher_Course_Students
    **/
    count?: true | Teacher_Course_StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: Teacher_Course_StudentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: Teacher_Course_StudentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: Teacher_Course_StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: Teacher_Course_StudentMaxAggregateInputType
  }

  export type GetTeacher_Course_StudentAggregateType<T extends Teacher_Course_StudentAggregateArgs> = {
    [P in keyof T & keyof AggregateTeacher_Course_Student]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher_Course_Student[P]>
      : GetScalarType<T[P], AggregateTeacher_Course_Student[P]>
  }



  export type Teacher_Course_StudentSelect = {
    id?: boolean
    teacher?: boolean | TeacherArgs
    teacherId?: boolean
    student?: boolean | StudentArgs
    studentId?: boolean
    course?: boolean | CourseArgs
    courseId?: boolean
    subgroup?: boolean
    consult?: boolean | ConsultFindManyArgs
    journalEntry?: boolean | JournalEntryFindManyArgs
    quaterMark?: boolean | QuaterMarkFindManyArgs
  }

  export type Teacher_Course_StudentInclude = {
    teacher?: boolean | TeacherArgs
    student?: boolean | StudentArgs
    course?: boolean | CourseArgs
    consult?: boolean | ConsultFindManyArgs
    journalEntry?: boolean | JournalEntryFindManyArgs
    quaterMark?: boolean | QuaterMarkFindManyArgs
  }

  export type Teacher_Course_StudentGetPayload<
    S extends boolean | null | undefined | Teacher_Course_StudentArgs,
    U = keyof S
      > = S extends true
        ? Teacher_Course_Student
    : S extends undefined
    ? never
    : S extends Teacher_Course_StudentArgs | Teacher_Course_StudentFindManyArgs
    ?'include' extends U
    ? Teacher_Course_Student  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'teacher'
        ? TeacherGetPayload<S['include'][P]> :
        P extends 'student'
        ? StudentGetPayload<S['include'][P]> :
        P extends 'course'
        ? CourseGetPayload<S['include'][P]> :
        P extends 'consult'
        ? Array < ConsultGetPayload<S['include'][P]>>  :
        P extends 'journalEntry'
        ? Array < JournalEntryGetPayload<S['include'][P]>>  :
        P extends 'quaterMark'
        ? Array < QuaterMarkGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Teacher_Course_Student ?Teacher_Course_Student [P]
  : 
          P extends 'teacher'
        ? TeacherGetPayload<S['select'][P]> :
        P extends 'student'
        ? StudentGetPayload<S['select'][P]> :
        P extends 'course'
        ? CourseGetPayload<S['select'][P]> :
        P extends 'consult'
        ? Array < ConsultGetPayload<S['select'][P]>>  :
        P extends 'journalEntry'
        ? Array < JournalEntryGetPayload<S['select'][P]>>  :
        P extends 'quaterMark'
        ? Array < QuaterMarkGetPayload<S['select'][P]>>  : never
  } 
    : Teacher_Course_Student
  : Teacher_Course_Student


  type Teacher_Course_StudentCountArgs = Merge<
    Omit<Teacher_Course_StudentFindManyArgs, 'select' | 'include'> & {
      select?: Teacher_Course_StudentCountAggregateInputType | true
    }
  >

  export interface Teacher_Course_StudentDelegate {
    /**
     * Find zero or one Teacher_Course_Student that matches the filter.
     * @param {Teacher_Course_StudentFindUniqueArgs} args - Arguments to find a Teacher_Course_Student
     * @example
     * // Get one Teacher_Course_Student
     * const teacher_Course_Student = await prisma.teacher_Course_Student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends Teacher_Course_StudentFindUniqueArgs>(
      args: SelectSubset<T, Teacher_Course_StudentFindUniqueArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student | null>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T> | null>>

    /**
     * Find the first Teacher_Course_Student that matches the filter.
     * @param {Teacher_Course_StudentFindFirstArgs} args - Arguments to find a Teacher_Course_Student
     * @example
     * // Get one Teacher_Course_Student
     * const teacher_Course_Student = await prisma.teacher_Course_Student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends Teacher_Course_StudentFindFirstArgs>(
      args?: SelectSubset<T, Teacher_Course_StudentFindFirstArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student | null>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T> | null>>

    /**
     * Find zero or more Teacher_Course_Students that matches the filter.
     * @param {Teacher_Course_StudentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teacher_Course_Students
     * const teacher_Course_Students = await prisma.teacher_Course_Student.findMany()
     * 
     * // Get first 10 Teacher_Course_Students
     * const teacher_Course_Students = await prisma.teacher_Course_Student.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacher_Course_StudentWithIdOnly = await prisma.teacher_Course_Student.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends Teacher_Course_StudentFindManyArgs>(
      args?: SelectSubset<T, Teacher_Course_StudentFindManyArgs>
    ): CheckSelect<T, Promise<Array<Teacher_Course_Student>>, Promise<Array<Teacher_Course_StudentGetPayload<T>>>>

    /**
     * Create a Teacher_Course_Student.
     * @param {Teacher_Course_StudentCreateArgs} args - Arguments to create a Teacher_Course_Student.
     * @example
     * // Create one Teacher_Course_Student
     * const Teacher_Course_Student = await prisma.teacher_Course_Student.create({
     *   data: {
     *     // ... data to create a Teacher_Course_Student
     *   }
     * })
     * 
    **/
    create<T extends Teacher_Course_StudentCreateArgs>(
      args: SelectSubset<T, Teacher_Course_StudentCreateArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T>>>

    /**
     * Delete a Teacher_Course_Student.
     * @param {Teacher_Course_StudentDeleteArgs} args - Arguments to delete one Teacher_Course_Student.
     * @example
     * // Delete one Teacher_Course_Student
     * const Teacher_Course_Student = await prisma.teacher_Course_Student.delete({
     *   where: {
     *     // ... filter to delete one Teacher_Course_Student
     *   }
     * })
     * 
    **/
    delete<T extends Teacher_Course_StudentDeleteArgs>(
      args: SelectSubset<T, Teacher_Course_StudentDeleteArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T>>>

    /**
     * Update one Teacher_Course_Student.
     * @param {Teacher_Course_StudentUpdateArgs} args - Arguments to update one Teacher_Course_Student.
     * @example
     * // Update one Teacher_Course_Student
     * const teacher_Course_Student = await prisma.teacher_Course_Student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends Teacher_Course_StudentUpdateArgs>(
      args: SelectSubset<T, Teacher_Course_StudentUpdateArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T>>>

    /**
     * Delete zero or more Teacher_Course_Students.
     * @param {Teacher_Course_StudentDeleteManyArgs} args - Arguments to filter Teacher_Course_Students to delete.
     * @example
     * // Delete a few Teacher_Course_Students
     * const { count } = await prisma.teacher_Course_Student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends Teacher_Course_StudentDeleteManyArgs>(
      args?: SelectSubset<T, Teacher_Course_StudentDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Teacher_Course_Students.
     * @param {Teacher_Course_StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teacher_Course_Students
     * const teacher_Course_Student = await prisma.teacher_Course_Student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends Teacher_Course_StudentUpdateManyArgs>(
      args: SelectSubset<T, Teacher_Course_StudentUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Teacher_Course_Student.
     * @param {Teacher_Course_StudentUpsertArgs} args - Arguments to update or create a Teacher_Course_Student.
     * @example
     * // Update or create a Teacher_Course_Student
     * const teacher_Course_Student = await prisma.teacher_Course_Student.upsert({
     *   create: {
     *     // ... data to create a Teacher_Course_Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher_Course_Student we want to update
     *   }
     * })
    **/
    upsert<T extends Teacher_Course_StudentUpsertArgs>(
      args: SelectSubset<T, Teacher_Course_StudentUpsertArgs>
    ): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T>>>

    /**
     * Count the number of Teacher_Course_Students.
     * @param {Teacher_Course_StudentCountArgs} args - Arguments to filter Teacher_Course_Students to count.
     * @example
     * // Count the number of Teacher_Course_Students
     * const count = await prisma.teacher_Course_Student.count({
     *   where: {
     *     // ... the filter for the Teacher_Course_Students we want to count
     *   }
     * })
    **/
    count<T extends Teacher_Course_StudentCountArgs>(
      args?: Subset<T, Teacher_Course_StudentCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Teacher_Course_StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher_Course_Student.
     * @param {Teacher_Course_StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Teacher_Course_StudentAggregateArgs>(args: Subset<T, Teacher_Course_StudentAggregateArgs>): Promise<GetTeacher_Course_StudentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher_Course_Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__Teacher_Course_StudentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teacher<T extends TeacherArgs = {}>(args?: Subset<T, TeacherArgs>): CheckSelect<T, Prisma__TeacherClient<Teacher | null>, Prisma__TeacherClient<TeacherGetPayload<T> | null>>;

    student<T extends StudentArgs = {}>(args?: Subset<T, StudentArgs>): CheckSelect<T, Prisma__StudentClient<Student | null>, Prisma__StudentClient<StudentGetPayload<T> | null>>;

    course<T extends CourseArgs = {}>(args?: Subset<T, CourseArgs>): CheckSelect<T, Prisma__CourseClient<Course | null>, Prisma__CourseClient<CourseGetPayload<T> | null>>;

    consult<T extends ConsultFindManyArgs = {}>(args?: Subset<T, ConsultFindManyArgs>): CheckSelect<T, Promise<Array<Consult>>, Promise<Array<ConsultGetPayload<T>>>>;

    journalEntry<T extends JournalEntryFindManyArgs = {}>(args?: Subset<T, JournalEntryFindManyArgs>): CheckSelect<T, Promise<Array<JournalEntry>>, Promise<Array<JournalEntryGetPayload<T>>>>;

    quaterMark<T extends QuaterMarkFindManyArgs = {}>(args?: Subset<T, QuaterMarkFindManyArgs>): CheckSelect<T, Promise<Array<QuaterMark>>, Promise<Array<QuaterMarkGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Teacher_Course_Student findUnique
   */
  export type Teacher_Course_StudentFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * Throw an Error if a Teacher_Course_Student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Teacher_Course_Student to fetch.
    **/
    where: Teacher_Course_StudentWhereUniqueInput
  }


  /**
   * Teacher_Course_Student findFirst
   */
  export type Teacher_Course_StudentFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * Throw an Error if a Teacher_Course_Student can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Teacher_Course_Student to fetch.
    **/
    where?: Teacher_Course_StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teacher_Course_Students to fetch.
    **/
    orderBy?: Enumerable<Teacher_Course_StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teacher_Course_Students.
    **/
    cursor?: Teacher_Course_StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teacher_Course_Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teacher_Course_Students.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Teacher_Course_Students.
    **/
    distinct?: Enumerable<Teacher_Course_StudentScalarFieldEnum>
  }


  /**
   * Teacher_Course_Student findMany
   */
  export type Teacher_Course_StudentFindManyArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * Filter, which Teacher_Course_Students to fetch.
    **/
    where?: Teacher_Course_StudentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Teacher_Course_Students to fetch.
    **/
    orderBy?: Enumerable<Teacher_Course_StudentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teacher_Course_Students.
    **/
    cursor?: Teacher_Course_StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teacher_Course_Students from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teacher_Course_Students.
    **/
    skip?: number
    distinct?: Enumerable<Teacher_Course_StudentScalarFieldEnum>
  }


  /**
   * Teacher_Course_Student create
   */
  export type Teacher_Course_StudentCreateArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * The data needed to create a Teacher_Course_Student.
    **/
    data: XOR<Teacher_Course_StudentUncheckedCreateInput, Teacher_Course_StudentCreateInput>
  }


  /**
   * Teacher_Course_Student update
   */
  export type Teacher_Course_StudentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * The data needed to update a Teacher_Course_Student.
    **/
    data: XOR<Teacher_Course_StudentUncheckedUpdateInput, Teacher_Course_StudentUpdateInput>
    /**
     * Choose, which Teacher_Course_Student to update.
    **/
    where: Teacher_Course_StudentWhereUniqueInput
  }


  /**
   * Teacher_Course_Student updateMany
   */
  export type Teacher_Course_StudentUpdateManyArgs = {
    data: XOR<Teacher_Course_StudentUncheckedUpdateManyInput, Teacher_Course_StudentUpdateManyMutationInput>
    where?: Teacher_Course_StudentWhereInput
  }


  /**
   * Teacher_Course_Student upsert
   */
  export type Teacher_Course_StudentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * The filter to search for the Teacher_Course_Student to update in case it exists.
    **/
    where: Teacher_Course_StudentWhereUniqueInput
    /**
     * In case the Teacher_Course_Student found by the `where` argument doesn't exist, create a new Teacher_Course_Student with this data.
    **/
    create: XOR<Teacher_Course_StudentUncheckedCreateInput, Teacher_Course_StudentCreateInput>
    /**
     * In case the Teacher_Course_Student was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<Teacher_Course_StudentUncheckedUpdateInput, Teacher_Course_StudentUpdateInput>
  }


  /**
   * Teacher_Course_Student delete
   */
  export type Teacher_Course_StudentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
    /**
     * Filter which Teacher_Course_Student to delete.
    **/
    where: Teacher_Course_StudentWhereUniqueInput
  }


  /**
   * Teacher_Course_Student deleteMany
   */
  export type Teacher_Course_StudentDeleteManyArgs = {
    where?: Teacher_Course_StudentWhereInput
  }


  /**
   * Teacher_Course_Student without action
   */
  export type Teacher_Course_StudentArgs = {
    /**
     * Select specific fields to fetch from the Teacher_Course_Student
    **/
    select?: Teacher_Course_StudentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: Teacher_Course_StudentInclude | null
  }



  /**
   * Model JournalEntry
   */


  export type AggregateJournalEntry = {
    count: JournalEntryCountAggregateOutputType | null
    avg: JournalEntryAvgAggregateOutputType | null
    sum: JournalEntrySumAggregateOutputType | null
    min: JournalEntryMinAggregateOutputType | null
    max: JournalEntryMaxAggregateOutputType | null
  }

  export type JournalEntryAvgAggregateOutputType = {
    id: number
    relationId: number
  }

  export type JournalEntrySumAggregateOutputType = {
    id: number
    relationId: number
  }

  export type JournalEntryMinAggregateOutputType = {
    id: number
    mark: string | null
    date: Date | null
    relationId: number
  }

  export type JournalEntryMaxAggregateOutputType = {
    id: number
    mark: string | null
    date: Date | null
    relationId: number
  }

  export type JournalEntryCountAggregateOutputType = {
    id: number
    mark: number | null
    date: number | null
    relationId: number
    _all: number
  }


  export type JournalEntryAvgAggregateInputType = {
    id?: true
    relationId?: true
  }

  export type JournalEntrySumAggregateInputType = {
    id?: true
    relationId?: true
  }

  export type JournalEntryMinAggregateInputType = {
    id?: true
    mark?: true
    date?: true
    relationId?: true
  }

  export type JournalEntryMaxAggregateInputType = {
    id?: true
    mark?: true
    date?: true
    relationId?: true
  }

  export type JournalEntryCountAggregateInputType = {
    id?: true
    mark?: true
    date?: true
    relationId?: true
    _all?: true
  }

  export type JournalEntryAggregateArgs = {
    /**
     * Filter which JournalEntry to aggregate.
    **/
    where?: JournalEntryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of JournalEntries to fetch.
    **/
    orderBy?: Enumerable<JournalEntryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JournalEntries
    **/
    count?: true | JournalEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: JournalEntryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: JournalEntrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: JournalEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: JournalEntryMaxAggregateInputType
  }

  export type GetJournalEntryAggregateType<T extends JournalEntryAggregateArgs> = {
    [P in keyof T & keyof AggregateJournalEntry]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournalEntry[P]>
      : GetScalarType<T[P], AggregateJournalEntry[P]>
  }



  export type JournalEntrySelect = {
    id?: boolean
    mark?: boolean
    date?: boolean
    relation?: boolean | Teacher_Course_StudentArgs
    relationId?: boolean
    replacement?: boolean | ReplacementArgs
  }

  export type JournalEntryInclude = {
    relation?: boolean | Teacher_Course_StudentArgs
    replacement?: boolean | ReplacementArgs
  }

  export type JournalEntryGetPayload<
    S extends boolean | null | undefined | JournalEntryArgs,
    U = keyof S
      > = S extends true
        ? JournalEntry
    : S extends undefined
    ? never
    : S extends JournalEntryArgs | JournalEntryFindManyArgs
    ?'include' extends U
    ? JournalEntry  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['include'][P]> :
        P extends 'replacement'
        ? ReplacementGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof JournalEntry ?JournalEntry [P]
  : 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['select'][P]> :
        P extends 'replacement'
        ? ReplacementGetPayload<S['select'][P]> | null : never
  } 
    : JournalEntry
  : JournalEntry


  type JournalEntryCountArgs = Merge<
    Omit<JournalEntryFindManyArgs, 'select' | 'include'> & {
      select?: JournalEntryCountAggregateInputType | true
    }
  >

  export interface JournalEntryDelegate {
    /**
     * Find zero or one JournalEntry that matches the filter.
     * @param {JournalEntryFindUniqueArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JournalEntryFindUniqueArgs>(
      args: SelectSubset<T, JournalEntryFindUniqueArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry | null>, Prisma__JournalEntryClient<JournalEntryGetPayload<T> | null>>

    /**
     * Find the first JournalEntry that matches the filter.
     * @param {JournalEntryFindFirstArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JournalEntryFindFirstArgs>(
      args?: SelectSubset<T, JournalEntryFindFirstArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry | null>, Prisma__JournalEntryClient<JournalEntryGetPayload<T> | null>>

    /**
     * Find zero or more JournalEntries that matches the filter.
     * @param {JournalEntryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JournalEntries
     * const journalEntries = await prisma.journalEntry.findMany()
     * 
     * // Get first 10 JournalEntries
     * const journalEntries = await prisma.journalEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journalEntryWithIdOnly = await prisma.journalEntry.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JournalEntryFindManyArgs>(
      args?: SelectSubset<T, JournalEntryFindManyArgs>
    ): CheckSelect<T, Promise<Array<JournalEntry>>, Promise<Array<JournalEntryGetPayload<T>>>>

    /**
     * Create a JournalEntry.
     * @param {JournalEntryCreateArgs} args - Arguments to create a JournalEntry.
     * @example
     * // Create one JournalEntry
     * const JournalEntry = await prisma.journalEntry.create({
     *   data: {
     *     // ... data to create a JournalEntry
     *   }
     * })
     * 
    **/
    create<T extends JournalEntryCreateArgs>(
      args: SelectSubset<T, JournalEntryCreateArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry>, Prisma__JournalEntryClient<JournalEntryGetPayload<T>>>

    /**
     * Delete a JournalEntry.
     * @param {JournalEntryDeleteArgs} args - Arguments to delete one JournalEntry.
     * @example
     * // Delete one JournalEntry
     * const JournalEntry = await prisma.journalEntry.delete({
     *   where: {
     *     // ... filter to delete one JournalEntry
     *   }
     * })
     * 
    **/
    delete<T extends JournalEntryDeleteArgs>(
      args: SelectSubset<T, JournalEntryDeleteArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry>, Prisma__JournalEntryClient<JournalEntryGetPayload<T>>>

    /**
     * Update one JournalEntry.
     * @param {JournalEntryUpdateArgs} args - Arguments to update one JournalEntry.
     * @example
     * // Update one JournalEntry
     * const journalEntry = await prisma.journalEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JournalEntryUpdateArgs>(
      args: SelectSubset<T, JournalEntryUpdateArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry>, Prisma__JournalEntryClient<JournalEntryGetPayload<T>>>

    /**
     * Delete zero or more JournalEntries.
     * @param {JournalEntryDeleteManyArgs} args - Arguments to filter JournalEntries to delete.
     * @example
     * // Delete a few JournalEntries
     * const { count } = await prisma.journalEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JournalEntryDeleteManyArgs>(
      args?: SelectSubset<T, JournalEntryDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more JournalEntries.
     * @param {JournalEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JournalEntries
     * const journalEntry = await prisma.journalEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JournalEntryUpdateManyArgs>(
      args: SelectSubset<T, JournalEntryUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one JournalEntry.
     * @param {JournalEntryUpsertArgs} args - Arguments to update or create a JournalEntry.
     * @example
     * // Update or create a JournalEntry
     * const journalEntry = await prisma.journalEntry.upsert({
     *   create: {
     *     // ... data to create a JournalEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JournalEntry we want to update
     *   }
     * })
    **/
    upsert<T extends JournalEntryUpsertArgs>(
      args: SelectSubset<T, JournalEntryUpsertArgs>
    ): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry>, Prisma__JournalEntryClient<JournalEntryGetPayload<T>>>

    /**
     * Count the number of JournalEntries.
     * @param {JournalEntryCountArgs} args - Arguments to filter JournalEntries to count.
     * @example
     * // Count the number of JournalEntries
     * const count = await prisma.journalEntry.count({
     *   where: {
     *     // ... the filter for the JournalEntries we want to count
     *   }
     * })
    **/
    count<T extends JournalEntryCountArgs>(
      args?: Subset<T, JournalEntryCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JournalEntry.
     * @param {JournalEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalEntryAggregateArgs>(args: Subset<T, JournalEntryAggregateArgs>): Promise<GetJournalEntryAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for JournalEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__JournalEntryClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relation<T extends Teacher_Course_StudentArgs = {}>(args?: Subset<T, Teacher_Course_StudentArgs>): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student | null>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T> | null>>;

    replacement<T extends ReplacementArgs = {}>(args?: Subset<T, ReplacementArgs>): CheckSelect<T, Prisma__ReplacementClient<Replacement | null>, Prisma__ReplacementClient<ReplacementGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * JournalEntry findUnique
   */
  export type JournalEntryFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * Throw an Error if a JournalEntry can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JournalEntry to fetch.
    **/
    where: JournalEntryWhereUniqueInput
  }


  /**
   * JournalEntry findFirst
   */
  export type JournalEntryFindFirstArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * Throw an Error if a JournalEntry can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which JournalEntry to fetch.
    **/
    where?: JournalEntryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of JournalEntries to fetch.
    **/
    orderBy?: Enumerable<JournalEntryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalEntries.
    **/
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of JournalEntries.
    **/
    distinct?: Enumerable<JournalEntryScalarFieldEnum>
  }


  /**
   * JournalEntry findMany
   */
  export type JournalEntryFindManyArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * Filter, which JournalEntries to fetch.
    **/
    where?: JournalEntryWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of JournalEntries to fetch.
    **/
    orderBy?: Enumerable<JournalEntryOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JournalEntries.
    **/
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
    **/
    skip?: number
    distinct?: Enumerable<JournalEntryScalarFieldEnum>
  }


  /**
   * JournalEntry create
   */
  export type JournalEntryCreateArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * The data needed to create a JournalEntry.
    **/
    data: XOR<JournalEntryUncheckedCreateInput, JournalEntryCreateInput>
  }


  /**
   * JournalEntry update
   */
  export type JournalEntryUpdateArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * The data needed to update a JournalEntry.
    **/
    data: XOR<JournalEntryUncheckedUpdateInput, JournalEntryUpdateInput>
    /**
     * Choose, which JournalEntry to update.
    **/
    where: JournalEntryWhereUniqueInput
  }


  /**
   * JournalEntry updateMany
   */
  export type JournalEntryUpdateManyArgs = {
    data: XOR<JournalEntryUncheckedUpdateManyInput, JournalEntryUpdateManyMutationInput>
    where?: JournalEntryWhereInput
  }


  /**
   * JournalEntry upsert
   */
  export type JournalEntryUpsertArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * The filter to search for the JournalEntry to update in case it exists.
    **/
    where: JournalEntryWhereUniqueInput
    /**
     * In case the JournalEntry found by the `where` argument doesn't exist, create a new JournalEntry with this data.
    **/
    create: XOR<JournalEntryUncheckedCreateInput, JournalEntryCreateInput>
    /**
     * In case the JournalEntry was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<JournalEntryUncheckedUpdateInput, JournalEntryUpdateInput>
  }


  /**
   * JournalEntry delete
   */
  export type JournalEntryDeleteArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
    /**
     * Filter which JournalEntry to delete.
    **/
    where: JournalEntryWhereUniqueInput
  }


  /**
   * JournalEntry deleteMany
   */
  export type JournalEntryDeleteManyArgs = {
    where?: JournalEntryWhereInput
  }


  /**
   * JournalEntry without action
   */
  export type JournalEntryArgs = {
    /**
     * Select specific fields to fetch from the JournalEntry
    **/
    select?: JournalEntrySelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: JournalEntryInclude | null
  }



  /**
   * Model QuaterMark
   */


  export type AggregateQuaterMark = {
    count: QuaterMarkCountAggregateOutputType | null
    avg: QuaterMarkAvgAggregateOutputType | null
    sum: QuaterMarkSumAggregateOutputType | null
    min: QuaterMarkMinAggregateOutputType | null
    max: QuaterMarkMaxAggregateOutputType | null
  }

  export type QuaterMarkAvgAggregateOutputType = {
    id: number
    relationId: number
  }

  export type QuaterMarkSumAggregateOutputType = {
    id: number
    relationId: number
  }

  export type QuaterMarkMinAggregateOutputType = {
    id: number
    mark: string | null
    period: Period | null
    relationId: number
  }

  export type QuaterMarkMaxAggregateOutputType = {
    id: number
    mark: string | null
    period: Period | null
    relationId: number
  }

  export type QuaterMarkCountAggregateOutputType = {
    id: number
    mark: number | null
    period: number | null
    relationId: number
    _all: number
  }


  export type QuaterMarkAvgAggregateInputType = {
    id?: true
    relationId?: true
  }

  export type QuaterMarkSumAggregateInputType = {
    id?: true
    relationId?: true
  }

  export type QuaterMarkMinAggregateInputType = {
    id?: true
    mark?: true
    period?: true
    relationId?: true
  }

  export type QuaterMarkMaxAggregateInputType = {
    id?: true
    mark?: true
    period?: true
    relationId?: true
  }

  export type QuaterMarkCountAggregateInputType = {
    id?: true
    mark?: true
    period?: true
    relationId?: true
    _all?: true
  }

  export type QuaterMarkAggregateArgs = {
    /**
     * Filter which QuaterMark to aggregate.
    **/
    where?: QuaterMarkWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of QuaterMarks to fetch.
    **/
    orderBy?: Enumerable<QuaterMarkOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: QuaterMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuaterMarks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuaterMarks.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QuaterMarks
    **/
    count?: true | QuaterMarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: QuaterMarkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: QuaterMarkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: QuaterMarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: QuaterMarkMaxAggregateInputType
  }

  export type GetQuaterMarkAggregateType<T extends QuaterMarkAggregateArgs> = {
    [P in keyof T & keyof AggregateQuaterMark]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuaterMark[P]>
      : GetScalarType<T[P], AggregateQuaterMark[P]>
  }



  export type QuaterMarkSelect = {
    id?: boolean
    mark?: boolean
    period?: boolean
    relation?: boolean | Teacher_Course_StudentArgs
    relationId?: boolean
  }

  export type QuaterMarkInclude = {
    relation?: boolean | Teacher_Course_StudentArgs
  }

  export type QuaterMarkGetPayload<
    S extends boolean | null | undefined | QuaterMarkArgs,
    U = keyof S
      > = S extends true
        ? QuaterMark
    : S extends undefined
    ? never
    : S extends QuaterMarkArgs | QuaterMarkFindManyArgs
    ?'include' extends U
    ? QuaterMark  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof QuaterMark ?QuaterMark [P]
  : 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['select'][P]> : never
  } 
    : QuaterMark
  : QuaterMark


  type QuaterMarkCountArgs = Merge<
    Omit<QuaterMarkFindManyArgs, 'select' | 'include'> & {
      select?: QuaterMarkCountAggregateInputType | true
    }
  >

  export interface QuaterMarkDelegate {
    /**
     * Find zero or one QuaterMark that matches the filter.
     * @param {QuaterMarkFindUniqueArgs} args - Arguments to find a QuaterMark
     * @example
     * // Get one QuaterMark
     * const quaterMark = await prisma.quaterMark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends QuaterMarkFindUniqueArgs>(
      args: SelectSubset<T, QuaterMarkFindUniqueArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark | null>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T> | null>>

    /**
     * Find the first QuaterMark that matches the filter.
     * @param {QuaterMarkFindFirstArgs} args - Arguments to find a QuaterMark
     * @example
     * // Get one QuaterMark
     * const quaterMark = await prisma.quaterMark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends QuaterMarkFindFirstArgs>(
      args?: SelectSubset<T, QuaterMarkFindFirstArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark | null>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T> | null>>

    /**
     * Find zero or more QuaterMarks that matches the filter.
     * @param {QuaterMarkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QuaterMarks
     * const quaterMarks = await prisma.quaterMark.findMany()
     * 
     * // Get first 10 QuaterMarks
     * const quaterMarks = await prisma.quaterMark.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const quaterMarkWithIdOnly = await prisma.quaterMark.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends QuaterMarkFindManyArgs>(
      args?: SelectSubset<T, QuaterMarkFindManyArgs>
    ): CheckSelect<T, Promise<Array<QuaterMark>>, Promise<Array<QuaterMarkGetPayload<T>>>>

    /**
     * Create a QuaterMark.
     * @param {QuaterMarkCreateArgs} args - Arguments to create a QuaterMark.
     * @example
     * // Create one QuaterMark
     * const QuaterMark = await prisma.quaterMark.create({
     *   data: {
     *     // ... data to create a QuaterMark
     *   }
     * })
     * 
    **/
    create<T extends QuaterMarkCreateArgs>(
      args: SelectSubset<T, QuaterMarkCreateArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T>>>

    /**
     * Delete a QuaterMark.
     * @param {QuaterMarkDeleteArgs} args - Arguments to delete one QuaterMark.
     * @example
     * // Delete one QuaterMark
     * const QuaterMark = await prisma.quaterMark.delete({
     *   where: {
     *     // ... filter to delete one QuaterMark
     *   }
     * })
     * 
    **/
    delete<T extends QuaterMarkDeleteArgs>(
      args: SelectSubset<T, QuaterMarkDeleteArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T>>>

    /**
     * Update one QuaterMark.
     * @param {QuaterMarkUpdateArgs} args - Arguments to update one QuaterMark.
     * @example
     * // Update one QuaterMark
     * const quaterMark = await prisma.quaterMark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends QuaterMarkUpdateArgs>(
      args: SelectSubset<T, QuaterMarkUpdateArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T>>>

    /**
     * Delete zero or more QuaterMarks.
     * @param {QuaterMarkDeleteManyArgs} args - Arguments to filter QuaterMarks to delete.
     * @example
     * // Delete a few QuaterMarks
     * const { count } = await prisma.quaterMark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends QuaterMarkDeleteManyArgs>(
      args?: SelectSubset<T, QuaterMarkDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more QuaterMarks.
     * @param {QuaterMarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QuaterMarks
     * const quaterMark = await prisma.quaterMark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends QuaterMarkUpdateManyArgs>(
      args: SelectSubset<T, QuaterMarkUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one QuaterMark.
     * @param {QuaterMarkUpsertArgs} args - Arguments to update or create a QuaterMark.
     * @example
     * // Update or create a QuaterMark
     * const quaterMark = await prisma.quaterMark.upsert({
     *   create: {
     *     // ... data to create a QuaterMark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QuaterMark we want to update
     *   }
     * })
    **/
    upsert<T extends QuaterMarkUpsertArgs>(
      args: SelectSubset<T, QuaterMarkUpsertArgs>
    ): CheckSelect<T, Prisma__QuaterMarkClient<QuaterMark>, Prisma__QuaterMarkClient<QuaterMarkGetPayload<T>>>

    /**
     * Count the number of QuaterMarks.
     * @param {QuaterMarkCountArgs} args - Arguments to filter QuaterMarks to count.
     * @example
     * // Count the number of QuaterMarks
     * const count = await prisma.quaterMark.count({
     *   where: {
     *     // ... the filter for the QuaterMarks we want to count
     *   }
     * })
    **/
    count<T extends QuaterMarkCountArgs>(
      args?: Subset<T, QuaterMarkCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuaterMarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QuaterMark.
     * @param {QuaterMarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuaterMarkAggregateArgs>(args: Subset<T, QuaterMarkAggregateArgs>): Promise<GetQuaterMarkAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for QuaterMark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__QuaterMarkClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relation<T extends Teacher_Course_StudentArgs = {}>(args?: Subset<T, Teacher_Course_StudentArgs>): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student | null>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * QuaterMark findUnique
   */
  export type QuaterMarkFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * Throw an Error if a QuaterMark can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which QuaterMark to fetch.
    **/
    where: QuaterMarkWhereUniqueInput
  }


  /**
   * QuaterMark findFirst
   */
  export type QuaterMarkFindFirstArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * Throw an Error if a QuaterMark can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which QuaterMark to fetch.
    **/
    where?: QuaterMarkWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of QuaterMarks to fetch.
    **/
    orderBy?: Enumerable<QuaterMarkOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QuaterMarks.
    **/
    cursor?: QuaterMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuaterMarks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuaterMarks.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of QuaterMarks.
    **/
    distinct?: Enumerable<QuaterMarkScalarFieldEnum>
  }


  /**
   * QuaterMark findMany
   */
  export type QuaterMarkFindManyArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * Filter, which QuaterMarks to fetch.
    **/
    where?: QuaterMarkWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of QuaterMarks to fetch.
    **/
    orderBy?: Enumerable<QuaterMarkOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QuaterMarks.
    **/
    cursor?: QuaterMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QuaterMarks from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QuaterMarks.
    **/
    skip?: number
    distinct?: Enumerable<QuaterMarkScalarFieldEnum>
  }


  /**
   * QuaterMark create
   */
  export type QuaterMarkCreateArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * The data needed to create a QuaterMark.
    **/
    data: XOR<QuaterMarkUncheckedCreateInput, QuaterMarkCreateInput>
  }


  /**
   * QuaterMark update
   */
  export type QuaterMarkUpdateArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * The data needed to update a QuaterMark.
    **/
    data: XOR<QuaterMarkUncheckedUpdateInput, QuaterMarkUpdateInput>
    /**
     * Choose, which QuaterMark to update.
    **/
    where: QuaterMarkWhereUniqueInput
  }


  /**
   * QuaterMark updateMany
   */
  export type QuaterMarkUpdateManyArgs = {
    data: XOR<QuaterMarkUncheckedUpdateManyInput, QuaterMarkUpdateManyMutationInput>
    where?: QuaterMarkWhereInput
  }


  /**
   * QuaterMark upsert
   */
  export type QuaterMarkUpsertArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * The filter to search for the QuaterMark to update in case it exists.
    **/
    where: QuaterMarkWhereUniqueInput
    /**
     * In case the QuaterMark found by the `where` argument doesn't exist, create a new QuaterMark with this data.
    **/
    create: XOR<QuaterMarkUncheckedCreateInput, QuaterMarkCreateInput>
    /**
     * In case the QuaterMark was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<QuaterMarkUncheckedUpdateInput, QuaterMarkUpdateInput>
  }


  /**
   * QuaterMark delete
   */
  export type QuaterMarkDeleteArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
    /**
     * Filter which QuaterMark to delete.
    **/
    where: QuaterMarkWhereUniqueInput
  }


  /**
   * QuaterMark deleteMany
   */
  export type QuaterMarkDeleteManyArgs = {
    where?: QuaterMarkWhereInput
  }


  /**
   * QuaterMark without action
   */
  export type QuaterMarkArgs = {
    /**
     * Select specific fields to fetch from the QuaterMark
    **/
    select?: QuaterMarkSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: QuaterMarkInclude | null
  }



  /**
   * Model Replacement
   */


  export type AggregateReplacement = {
    count: ReplacementCountAggregateOutputType | null
    avg: ReplacementAvgAggregateOutputType | null
    sum: ReplacementSumAggregateOutputType | null
    min: ReplacementMinAggregateOutputType | null
    max: ReplacementMaxAggregateOutputType | null
  }

  export type ReplacementAvgAggregateOutputType = {
    id: number
    entryId: number
  }

  export type ReplacementSumAggregateOutputType = {
    id: number
    entryId: number
  }

  export type ReplacementMinAggregateOutputType = {
    id: number
    date: Date | null
    entryId: number
  }

  export type ReplacementMaxAggregateOutputType = {
    id: number
    date: Date | null
    entryId: number
  }

  export type ReplacementCountAggregateOutputType = {
    id: number
    date: number | null
    entryId: number
    _all: number
  }


  export type ReplacementAvgAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type ReplacementSumAggregateInputType = {
    id?: true
    entryId?: true
  }

  export type ReplacementMinAggregateInputType = {
    id?: true
    date?: true
    entryId?: true
  }

  export type ReplacementMaxAggregateInputType = {
    id?: true
    date?: true
    entryId?: true
  }

  export type ReplacementCountAggregateInputType = {
    id?: true
    date?: true
    entryId?: true
    _all?: true
  }

  export type ReplacementAggregateArgs = {
    /**
     * Filter which Replacement to aggregate.
    **/
    where?: ReplacementWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Replacements to fetch.
    **/
    orderBy?: Enumerable<ReplacementOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replacements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replacements.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Replacements
    **/
    count?: true | ReplacementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ReplacementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ReplacementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ReplacementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ReplacementMaxAggregateInputType
  }

  export type GetReplacementAggregateType<T extends ReplacementAggregateArgs> = {
    [P in keyof T & keyof AggregateReplacement]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReplacement[P]>
      : GetScalarType<T[P], AggregateReplacement[P]>
  }



  export type ReplacementSelect = {
    id?: boolean
    date?: boolean
    journalEntry?: boolean | JournalEntryArgs
    entryId?: boolean
  }

  export type ReplacementInclude = {
    journalEntry?: boolean | JournalEntryArgs
  }

  export type ReplacementGetPayload<
    S extends boolean | null | undefined | ReplacementArgs,
    U = keyof S
      > = S extends true
        ? Replacement
    : S extends undefined
    ? never
    : S extends ReplacementArgs | ReplacementFindManyArgs
    ?'include' extends U
    ? Replacement  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'journalEntry'
        ? JournalEntryGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Replacement ?Replacement [P]
  : 
          P extends 'journalEntry'
        ? JournalEntryGetPayload<S['select'][P]> : never
  } 
    : Replacement
  : Replacement


  type ReplacementCountArgs = Merge<
    Omit<ReplacementFindManyArgs, 'select' | 'include'> & {
      select?: ReplacementCountAggregateInputType | true
    }
  >

  export interface ReplacementDelegate {
    /**
     * Find zero or one Replacement that matches the filter.
     * @param {ReplacementFindUniqueArgs} args - Arguments to find a Replacement
     * @example
     * // Get one Replacement
     * const replacement = await prisma.replacement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReplacementFindUniqueArgs>(
      args: SelectSubset<T, ReplacementFindUniqueArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement | null>, Prisma__ReplacementClient<ReplacementGetPayload<T> | null>>

    /**
     * Find the first Replacement that matches the filter.
     * @param {ReplacementFindFirstArgs} args - Arguments to find a Replacement
     * @example
     * // Get one Replacement
     * const replacement = await prisma.replacement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReplacementFindFirstArgs>(
      args?: SelectSubset<T, ReplacementFindFirstArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement | null>, Prisma__ReplacementClient<ReplacementGetPayload<T> | null>>

    /**
     * Find zero or more Replacements that matches the filter.
     * @param {ReplacementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Replacements
     * const replacements = await prisma.replacement.findMany()
     * 
     * // Get first 10 Replacements
     * const replacements = await prisma.replacement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const replacementWithIdOnly = await prisma.replacement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReplacementFindManyArgs>(
      args?: SelectSubset<T, ReplacementFindManyArgs>
    ): CheckSelect<T, Promise<Array<Replacement>>, Promise<Array<ReplacementGetPayload<T>>>>

    /**
     * Create a Replacement.
     * @param {ReplacementCreateArgs} args - Arguments to create a Replacement.
     * @example
     * // Create one Replacement
     * const Replacement = await prisma.replacement.create({
     *   data: {
     *     // ... data to create a Replacement
     *   }
     * })
     * 
    **/
    create<T extends ReplacementCreateArgs>(
      args: SelectSubset<T, ReplacementCreateArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement>, Prisma__ReplacementClient<ReplacementGetPayload<T>>>

    /**
     * Delete a Replacement.
     * @param {ReplacementDeleteArgs} args - Arguments to delete one Replacement.
     * @example
     * // Delete one Replacement
     * const Replacement = await prisma.replacement.delete({
     *   where: {
     *     // ... filter to delete one Replacement
     *   }
     * })
     * 
    **/
    delete<T extends ReplacementDeleteArgs>(
      args: SelectSubset<T, ReplacementDeleteArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement>, Prisma__ReplacementClient<ReplacementGetPayload<T>>>

    /**
     * Update one Replacement.
     * @param {ReplacementUpdateArgs} args - Arguments to update one Replacement.
     * @example
     * // Update one Replacement
     * const replacement = await prisma.replacement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReplacementUpdateArgs>(
      args: SelectSubset<T, ReplacementUpdateArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement>, Prisma__ReplacementClient<ReplacementGetPayload<T>>>

    /**
     * Delete zero or more Replacements.
     * @param {ReplacementDeleteManyArgs} args - Arguments to filter Replacements to delete.
     * @example
     * // Delete a few Replacements
     * const { count } = await prisma.replacement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReplacementDeleteManyArgs>(
      args?: SelectSubset<T, ReplacementDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Replacements.
     * @param {ReplacementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Replacements
     * const replacement = await prisma.replacement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReplacementUpdateManyArgs>(
      args: SelectSubset<T, ReplacementUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Replacement.
     * @param {ReplacementUpsertArgs} args - Arguments to update or create a Replacement.
     * @example
     * // Update or create a Replacement
     * const replacement = await prisma.replacement.upsert({
     *   create: {
     *     // ... data to create a Replacement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Replacement we want to update
     *   }
     * })
    **/
    upsert<T extends ReplacementUpsertArgs>(
      args: SelectSubset<T, ReplacementUpsertArgs>
    ): CheckSelect<T, Prisma__ReplacementClient<Replacement>, Prisma__ReplacementClient<ReplacementGetPayload<T>>>

    /**
     * Count the number of Replacements.
     * @param {ReplacementCountArgs} args - Arguments to filter Replacements to count.
     * @example
     * // Count the number of Replacements
     * const count = await prisma.replacement.count({
     *   where: {
     *     // ... the filter for the Replacements we want to count
     *   }
     * })
    **/
    count<T extends ReplacementCountArgs>(
      args?: Subset<T, ReplacementCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReplacementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Replacement.
     * @param {ReplacementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReplacementAggregateArgs>(args: Subset<T, ReplacementAggregateArgs>): Promise<GetReplacementAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Replacement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReplacementClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    journalEntry<T extends JournalEntryArgs = {}>(args?: Subset<T, JournalEntryArgs>): CheckSelect<T, Prisma__JournalEntryClient<JournalEntry | null>, Prisma__JournalEntryClient<JournalEntryGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Replacement findUnique
   */
  export type ReplacementFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * Throw an Error if a Replacement can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Replacement to fetch.
    **/
    where: ReplacementWhereUniqueInput
  }


  /**
   * Replacement findFirst
   */
  export type ReplacementFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * Throw an Error if a Replacement can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Replacement to fetch.
    **/
    where?: ReplacementWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Replacements to fetch.
    **/
    orderBy?: Enumerable<ReplacementOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Replacements.
    **/
    cursor?: ReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replacements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replacements.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Replacements.
    **/
    distinct?: Enumerable<ReplacementScalarFieldEnum>
  }


  /**
   * Replacement findMany
   */
  export type ReplacementFindManyArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * Filter, which Replacements to fetch.
    **/
    where?: ReplacementWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Replacements to fetch.
    **/
    orderBy?: Enumerable<ReplacementOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Replacements.
    **/
    cursor?: ReplacementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Replacements from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Replacements.
    **/
    skip?: number
    distinct?: Enumerable<ReplacementScalarFieldEnum>
  }


  /**
   * Replacement create
   */
  export type ReplacementCreateArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * The data needed to create a Replacement.
    **/
    data: XOR<ReplacementUncheckedCreateInput, ReplacementCreateInput>
  }


  /**
   * Replacement update
   */
  export type ReplacementUpdateArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * The data needed to update a Replacement.
    **/
    data: XOR<ReplacementUncheckedUpdateInput, ReplacementUpdateInput>
    /**
     * Choose, which Replacement to update.
    **/
    where: ReplacementWhereUniqueInput
  }


  /**
   * Replacement updateMany
   */
  export type ReplacementUpdateManyArgs = {
    data: XOR<ReplacementUncheckedUpdateManyInput, ReplacementUpdateManyMutationInput>
    where?: ReplacementWhereInput
  }


  /**
   * Replacement upsert
   */
  export type ReplacementUpsertArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * The filter to search for the Replacement to update in case it exists.
    **/
    where: ReplacementWhereUniqueInput
    /**
     * In case the Replacement found by the `where` argument doesn't exist, create a new Replacement with this data.
    **/
    create: XOR<ReplacementUncheckedCreateInput, ReplacementCreateInput>
    /**
     * In case the Replacement was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ReplacementUncheckedUpdateInput, ReplacementUpdateInput>
  }


  /**
   * Replacement delete
   */
  export type ReplacementDeleteArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
    /**
     * Filter which Replacement to delete.
    **/
    where: ReplacementWhereUniqueInput
  }


  /**
   * Replacement deleteMany
   */
  export type ReplacementDeleteManyArgs = {
    where?: ReplacementWhereInput
  }


  /**
   * Replacement without action
   */
  export type ReplacementArgs = {
    /**
     * Select specific fields to fetch from the Replacement
    **/
    select?: ReplacementSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ReplacementInclude | null
  }



  /**
   * Model Consult
   */


  export type AggregateConsult = {
    count: ConsultCountAggregateOutputType | null
    avg: ConsultAvgAggregateOutputType | null
    sum: ConsultSumAggregateOutputType | null
    min: ConsultMinAggregateOutputType | null
    max: ConsultMaxAggregateOutputType | null
  }

  export type ConsultAvgAggregateOutputType = {
    id: number
    year: number
    relationId: number
  }

  export type ConsultSumAggregateOutputType = {
    id: number
    year: number
    relationId: number
  }

  export type ConsultMinAggregateOutputType = {
    id: number
    date: Date | null
    period: Period | null
    year: number
    relationId: number
  }

  export type ConsultMaxAggregateOutputType = {
    id: number
    date: Date | null
    period: Period | null
    year: number
    relationId: number
  }

  export type ConsultCountAggregateOutputType = {
    id: number
    date: number | null
    period: number | null
    year: number
    relationId: number
    _all: number
  }


  export type ConsultAvgAggregateInputType = {
    id?: true
    year?: true
    relationId?: true
  }

  export type ConsultSumAggregateInputType = {
    id?: true
    year?: true
    relationId?: true
  }

  export type ConsultMinAggregateInputType = {
    id?: true
    date?: true
    period?: true
    year?: true
    relationId?: true
  }

  export type ConsultMaxAggregateInputType = {
    id?: true
    date?: true
    period?: true
    year?: true
    relationId?: true
  }

  export type ConsultCountAggregateInputType = {
    id?: true
    date?: true
    period?: true
    year?: true
    relationId?: true
    _all?: true
  }

  export type ConsultAggregateArgs = {
    /**
     * Filter which Consult to aggregate.
    **/
    where?: ConsultWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Consults to fetch.
    **/
    orderBy?: Enumerable<ConsultOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: ConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consults from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consults.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Consults
    **/
    count?: true | ConsultCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: ConsultAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: ConsultSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: ConsultMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: ConsultMaxAggregateInputType
  }

  export type GetConsultAggregateType<T extends ConsultAggregateArgs> = {
    [P in keyof T & keyof AggregateConsult]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateConsult[P]>
      : GetScalarType<T[P], AggregateConsult[P]>
  }



  export type ConsultSelect = {
    id?: boolean
    date?: boolean
    period?: boolean
    year?: boolean
    relation?: boolean | Teacher_Course_StudentArgs
    relationId?: boolean
  }

  export type ConsultInclude = {
    relation?: boolean | Teacher_Course_StudentArgs
  }

  export type ConsultGetPayload<
    S extends boolean | null | undefined | ConsultArgs,
    U = keyof S
      > = S extends true
        ? Consult
    : S extends undefined
    ? never
    : S extends ConsultArgs | ConsultFindManyArgs
    ?'include' extends U
    ? Consult  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Consult ?Consult [P]
  : 
          P extends 'relation'
        ? Teacher_Course_StudentGetPayload<S['select'][P]> : never
  } 
    : Consult
  : Consult


  type ConsultCountArgs = Merge<
    Omit<ConsultFindManyArgs, 'select' | 'include'> & {
      select?: ConsultCountAggregateInputType | true
    }
  >

  export interface ConsultDelegate {
    /**
     * Find zero or one Consult that matches the filter.
     * @param {ConsultFindUniqueArgs} args - Arguments to find a Consult
     * @example
     * // Get one Consult
     * const consult = await prisma.consult.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ConsultFindUniqueArgs>(
      args: SelectSubset<T, ConsultFindUniqueArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult | null>, Prisma__ConsultClient<ConsultGetPayload<T> | null>>

    /**
     * Find the first Consult that matches the filter.
     * @param {ConsultFindFirstArgs} args - Arguments to find a Consult
     * @example
     * // Get one Consult
     * const consult = await prisma.consult.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ConsultFindFirstArgs>(
      args?: SelectSubset<T, ConsultFindFirstArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult | null>, Prisma__ConsultClient<ConsultGetPayload<T> | null>>

    /**
     * Find zero or more Consults that matches the filter.
     * @param {ConsultFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Consults
     * const consults = await prisma.consult.findMany()
     * 
     * // Get first 10 Consults
     * const consults = await prisma.consult.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const consultWithIdOnly = await prisma.consult.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ConsultFindManyArgs>(
      args?: SelectSubset<T, ConsultFindManyArgs>
    ): CheckSelect<T, Promise<Array<Consult>>, Promise<Array<ConsultGetPayload<T>>>>

    /**
     * Create a Consult.
     * @param {ConsultCreateArgs} args - Arguments to create a Consult.
     * @example
     * // Create one Consult
     * const Consult = await prisma.consult.create({
     *   data: {
     *     // ... data to create a Consult
     *   }
     * })
     * 
    **/
    create<T extends ConsultCreateArgs>(
      args: SelectSubset<T, ConsultCreateArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult>, Prisma__ConsultClient<ConsultGetPayload<T>>>

    /**
     * Delete a Consult.
     * @param {ConsultDeleteArgs} args - Arguments to delete one Consult.
     * @example
     * // Delete one Consult
     * const Consult = await prisma.consult.delete({
     *   where: {
     *     // ... filter to delete one Consult
     *   }
     * })
     * 
    **/
    delete<T extends ConsultDeleteArgs>(
      args: SelectSubset<T, ConsultDeleteArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult>, Prisma__ConsultClient<ConsultGetPayload<T>>>

    /**
     * Update one Consult.
     * @param {ConsultUpdateArgs} args - Arguments to update one Consult.
     * @example
     * // Update one Consult
     * const consult = await prisma.consult.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ConsultUpdateArgs>(
      args: SelectSubset<T, ConsultUpdateArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult>, Prisma__ConsultClient<ConsultGetPayload<T>>>

    /**
     * Delete zero or more Consults.
     * @param {ConsultDeleteManyArgs} args - Arguments to filter Consults to delete.
     * @example
     * // Delete a few Consults
     * const { count } = await prisma.consult.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ConsultDeleteManyArgs>(
      args?: SelectSubset<T, ConsultDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Consults.
     * @param {ConsultUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Consults
     * const consult = await prisma.consult.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ConsultUpdateManyArgs>(
      args: SelectSubset<T, ConsultUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Consult.
     * @param {ConsultUpsertArgs} args - Arguments to update or create a Consult.
     * @example
     * // Update or create a Consult
     * const consult = await prisma.consult.upsert({
     *   create: {
     *     // ... data to create a Consult
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Consult we want to update
     *   }
     * })
    **/
    upsert<T extends ConsultUpsertArgs>(
      args: SelectSubset<T, ConsultUpsertArgs>
    ): CheckSelect<T, Prisma__ConsultClient<Consult>, Prisma__ConsultClient<ConsultGetPayload<T>>>

    /**
     * Count the number of Consults.
     * @param {ConsultCountArgs} args - Arguments to filter Consults to count.
     * @example
     * // Count the number of Consults
     * const count = await prisma.consult.count({
     *   where: {
     *     // ... the filter for the Consults we want to count
     *   }
     * })
    **/
    count<T extends ConsultCountArgs>(
      args?: Subset<T, ConsultCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ConsultCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Consult.
     * @param {ConsultAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ConsultAggregateArgs>(args: Subset<T, ConsultAggregateArgs>): Promise<GetConsultAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Consult.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ConsultClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    relation<T extends Teacher_Course_StudentArgs = {}>(args?: Subset<T, Teacher_Course_StudentArgs>): CheckSelect<T, Prisma__Teacher_Course_StudentClient<Teacher_Course_Student | null>, Prisma__Teacher_Course_StudentClient<Teacher_Course_StudentGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Consult findUnique
   */
  export type ConsultFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * Throw an Error if a Consult can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Consult to fetch.
    **/
    where: ConsultWhereUniqueInput
  }


  /**
   * Consult findFirst
   */
  export type ConsultFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * Throw an Error if a Consult can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Consult to fetch.
    **/
    where?: ConsultWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Consults to fetch.
    **/
    orderBy?: Enumerable<ConsultOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Consults.
    **/
    cursor?: ConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consults from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consults.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Consults.
    **/
    distinct?: Enumerable<ConsultScalarFieldEnum>
  }


  /**
   * Consult findMany
   */
  export type ConsultFindManyArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * Filter, which Consults to fetch.
    **/
    where?: ConsultWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Consults to fetch.
    **/
    orderBy?: Enumerable<ConsultOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Consults.
    **/
    cursor?: ConsultWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Consults from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Consults.
    **/
    skip?: number
    distinct?: Enumerable<ConsultScalarFieldEnum>
  }


  /**
   * Consult create
   */
  export type ConsultCreateArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * The data needed to create a Consult.
    **/
    data: XOR<ConsultUncheckedCreateInput, ConsultCreateInput>
  }


  /**
   * Consult update
   */
  export type ConsultUpdateArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * The data needed to update a Consult.
    **/
    data: XOR<ConsultUncheckedUpdateInput, ConsultUpdateInput>
    /**
     * Choose, which Consult to update.
    **/
    where: ConsultWhereUniqueInput
  }


  /**
   * Consult updateMany
   */
  export type ConsultUpdateManyArgs = {
    data: XOR<ConsultUncheckedUpdateManyInput, ConsultUpdateManyMutationInput>
    where?: ConsultWhereInput
  }


  /**
   * Consult upsert
   */
  export type ConsultUpsertArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * The filter to search for the Consult to update in case it exists.
    **/
    where: ConsultWhereUniqueInput
    /**
     * In case the Consult found by the `where` argument doesn't exist, create a new Consult with this data.
    **/
    create: XOR<ConsultUncheckedCreateInput, ConsultCreateInput>
    /**
     * In case the Consult was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<ConsultUncheckedUpdateInput, ConsultUpdateInput>
  }


  /**
   * Consult delete
   */
  export type ConsultDeleteArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
    /**
     * Filter which Consult to delete.
    **/
    where: ConsultWhereUniqueInput
  }


  /**
   * Consult deleteMany
   */
  export type ConsultDeleteManyArgs = {
    where?: ConsultWhereInput
  }


  /**
   * Consult without action
   */
  export type ConsultArgs = {
    /**
     * Select specific fields to fetch from the Consult
    **/
    select?: ConsultSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: ConsultInclude | null
  }



  /**
   * Model Note
   */


  export type AggregateNote = {
    count: NoteCountAggregateOutputType | null
    avg: NoteAvgAggregateOutputType | null
    sum: NoteSumAggregateOutputType | null
    min: NoteMinAggregateOutputType | null
    max: NoteMaxAggregateOutputType | null
  }

  export type NoteAvgAggregateOutputType = {
    id: number
    year: number
    teacherId: number
    courseId: number
  }

  export type NoteSumAggregateOutputType = {
    id: number
    year: number
    teacherId: number
    courseId: number
  }

  export type NoteMinAggregateOutputType = {
    id: number
    text: string | null
    period: Period | null
    year: number
    teacherId: number
    courseId: number
  }

  export type NoteMaxAggregateOutputType = {
    id: number
    text: string | null
    period: Period | null
    year: number
    teacherId: number
    courseId: number
  }

  export type NoteCountAggregateOutputType = {
    id: number
    text: number | null
    period: number | null
    year: number
    teacherId: number
    courseId: number
    _all: number
  }


  export type NoteAvgAggregateInputType = {
    id?: true
    year?: true
    teacherId?: true
    courseId?: true
  }

  export type NoteSumAggregateInputType = {
    id?: true
    year?: true
    teacherId?: true
    courseId?: true
  }

  export type NoteMinAggregateInputType = {
    id?: true
    text?: true
    period?: true
    year?: true
    teacherId?: true
    courseId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    text?: true
    period?: true
    year?: true
    teacherId?: true
    courseId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    text?: true
    period?: true
    year?: true
    teacherId?: true
    courseId?: true
    _all?: true
  }

  export type NoteAggregateArgs = {
    /**
     * Filter which Note to aggregate.
    **/
    where?: NoteWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Notes to fetch.
    **/
    orderBy?: Enumerable<NoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: NoteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: NoteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
    [P in keyof T & keyof AggregateNote]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }



  export type NoteSelect = {
    id?: boolean
    text?: boolean
    period?: boolean
    year?: boolean
    teacher?: boolean | TeacherArgs
    teacherId?: boolean
    course?: boolean | CourseArgs
    courseId?: boolean
  }

  export type NoteInclude = {
    teacher?: boolean | TeacherArgs
    course?: boolean | CourseArgs
  }

  export type NoteGetPayload<
    S extends boolean | null | undefined | NoteArgs,
    U = keyof S
      > = S extends true
        ? Note
    : S extends undefined
    ? never
    : S extends NoteArgs | NoteFindManyArgs
    ?'include' extends U
    ? Note  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'teacher'
        ? TeacherGetPayload<S['include'][P]> :
        P extends 'course'
        ? CourseGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Note ?Note [P]
  : 
          P extends 'teacher'
        ? TeacherGetPayload<S['select'][P]> :
        P extends 'course'
        ? CourseGetPayload<S['select'][P]> : never
  } 
    : Note
  : Note


  type NoteCountArgs = Merge<
    Omit<NoteFindManyArgs, 'select' | 'include'> & {
      select?: NoteCountAggregateInputType | true
    }
  >

  export interface NoteDelegate {
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NoteFindUniqueArgs>(
      args: SelectSubset<T, NoteFindUniqueArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note | null>, Prisma__NoteClient<NoteGetPayload<T> | null>>

    /**
     * Find the first Note that matches the filter.
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NoteFindFirstArgs>(
      args?: SelectSubset<T, NoteFindFirstArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note | null>, Prisma__NoteClient<NoteGetPayload<T> | null>>

    /**
     * Find zero or more Notes that matches the filter.
     * @param {NoteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NoteFindManyArgs>(
      args?: SelectSubset<T, NoteFindManyArgs>
    ): CheckSelect<T, Promise<Array<Note>>, Promise<Array<NoteGetPayload<T>>>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
    **/
    create<T extends NoteCreateArgs>(
      args: SelectSubset<T, NoteCreateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
    **/
    delete<T extends NoteDeleteArgs>(
      args: SelectSubset<T, NoteDeleteArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NoteUpdateArgs>(
      args: SelectSubset<T, NoteUpdateArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NoteDeleteManyArgs>(
      args?: SelectSubset<T, NoteDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Notes.
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NoteUpdateManyArgs>(
      args: SelectSubset<T, NoteUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
    **/
    upsert<T extends NoteUpsertArgs>(
      args: SelectSubset<T, NoteUpsertArgs>
    ): CheckSelect<T, Prisma__NoteClient<Note>, Prisma__NoteClient<NoteGetPayload<T>>>

    /**
     * Count the number of Notes.
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Promise<GetNoteAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__NoteClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    teacher<T extends TeacherArgs = {}>(args?: Subset<T, TeacherArgs>): CheckSelect<T, Prisma__TeacherClient<Teacher | null>, Prisma__TeacherClient<TeacherGetPayload<T> | null>>;

    course<T extends CourseArgs = {}>(args?: Subset<T, CourseArgs>): CheckSelect<T, Prisma__CourseClient<Course | null>, Prisma__CourseClient<CourseGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * Throw an Error if a Note can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Note to fetch.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * Throw an Error if a Note can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Note to fetch.
    **/
    where?: NoteWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Notes to fetch.
    **/
    orderBy?: Enumerable<NoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Notes.
    **/
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note findMany
   */
  export type NoteFindManyArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * Filter, which Notes to fetch.
    **/
    where?: NoteWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Notes to fetch.
    **/
    orderBy?: Enumerable<NoteOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
    **/
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
    **/
    skip?: number
    distinct?: Enumerable<NoteScalarFieldEnum>
  }


  /**
   * Note create
   */
  export type NoteCreateArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * The data needed to create a Note.
    **/
    data: XOR<NoteUncheckedCreateInput, NoteCreateInput>
  }


  /**
   * Note update
   */
  export type NoteUpdateArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * The data needed to update a Note.
    **/
    data: XOR<NoteUncheckedUpdateInput, NoteUpdateInput>
    /**
     * Choose, which Note to update.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs = {
    data: XOR<NoteUncheckedUpdateManyInput, NoteUpdateManyMutationInput>
    where?: NoteWhereInput
  }


  /**
   * Note upsert
   */
  export type NoteUpsertArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * The filter to search for the Note to update in case it exists.
    **/
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
    **/
    create: XOR<NoteUncheckedCreateInput, NoteCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<NoteUncheckedUpdateInput, NoteUpdateInput>
  }


  /**
   * Note delete
   */
  export type NoteDeleteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
    /**
     * Filter which Note to delete.
    **/
    where: NoteWhereUniqueInput
  }


  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs = {
    where?: NoteWhereInput
  }


  /**
   * Note without action
   */
  export type NoteArgs = {
    /**
     * Select specific fields to fetch from the Note
    **/
    select?: NoteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: NoteInclude | null
  }



  /**
   * Model Load
   */


  export type AggregateLoad = {
    count: LoadCountAggregateOutputType | null
    avg: LoadAvgAggregateOutputType | null
    sum: LoadSumAggregateOutputType | null
    min: LoadMinAggregateOutputType | null
    max: LoadMaxAggregateOutputType | null
  }

  export type LoadAvgAggregateOutputType = {
    id: number
    course: number
    class: number
    hours: number
  }

  export type LoadSumAggregateOutputType = {
    id: number
    course: number
    class: number
    hours: number
  }

  export type LoadMinAggregateOutputType = {
    id: number
    course: number
    class: number
    program: Program | null
    hours: number
  }

  export type LoadMaxAggregateOutputType = {
    id: number
    course: number
    class: number
    program: Program | null
    hours: number
  }

  export type LoadCountAggregateOutputType = {
    id: number
    course: number
    class: number
    program: number | null
    hours: number
    _all: number
  }


  export type LoadAvgAggregateInputType = {
    id?: true
    course?: true
    class?: true
    hours?: true
  }

  export type LoadSumAggregateInputType = {
    id?: true
    course?: true
    class?: true
    hours?: true
  }

  export type LoadMinAggregateInputType = {
    id?: true
    course?: true
    class?: true
    program?: true
    hours?: true
  }

  export type LoadMaxAggregateInputType = {
    id?: true
    course?: true
    class?: true
    program?: true
    hours?: true
  }

  export type LoadCountAggregateInputType = {
    id?: true
    course?: true
    class?: true
    program?: true
    hours?: true
    _all?: true
  }

  export type LoadAggregateArgs = {
    /**
     * Filter which Load to aggregate.
    **/
    where?: LoadWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Loads to fetch.
    **/
    orderBy?: Enumerable<LoadOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loads
    **/
    count?: true | LoadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LoadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LoadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LoadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LoadMaxAggregateInputType
  }

  export type GetLoadAggregateType<T extends LoadAggregateArgs> = {
    [P in keyof T & keyof AggregateLoad]: P extends 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoad[P]>
      : GetScalarType<T[P], AggregateLoad[P]>
  }



  export type LoadSelect = {
    id?: boolean
    course?: boolean
    class?: boolean
    program?: boolean
    hours?: boolean
  }

  export type LoadGetPayload<
    S extends boolean | null | undefined | LoadArgs,
    U = keyof S
      > = S extends true
        ? Load
    : S extends undefined
    ? never
    : S extends LoadArgs | LoadFindManyArgs
    ?'include' extends U
    ? Load 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Load ?Load [P]
  : 
     never
  } 
    : Load
  : Load


  type LoadCountArgs = Merge<
    Omit<LoadFindManyArgs, 'select' | 'include'> & {
      select?: LoadCountAggregateInputType | true
    }
  >

  export interface LoadDelegate {
    /**
     * Find zero or one Load that matches the filter.
     * @param {LoadFindUniqueArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoadFindUniqueArgs>(
      args: SelectSubset<T, LoadFindUniqueArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load | null>, Prisma__LoadClient<LoadGetPayload<T> | null>>

    /**
     * Find the first Load that matches the filter.
     * @param {LoadFindFirstArgs} args - Arguments to find a Load
     * @example
     * // Get one Load
     * const load = await prisma.load.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoadFindFirstArgs>(
      args?: SelectSubset<T, LoadFindFirstArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load | null>, Prisma__LoadClient<LoadGetPayload<T> | null>>

    /**
     * Find zero or more Loads that matches the filter.
     * @param {LoadFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loads
     * const loads = await prisma.load.findMany()
     * 
     * // Get first 10 Loads
     * const loads = await prisma.load.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loadWithIdOnly = await prisma.load.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoadFindManyArgs>(
      args?: SelectSubset<T, LoadFindManyArgs>
    ): CheckSelect<T, Promise<Array<Load>>, Promise<Array<LoadGetPayload<T>>>>

    /**
     * Create a Load.
     * @param {LoadCreateArgs} args - Arguments to create a Load.
     * @example
     * // Create one Load
     * const Load = await prisma.load.create({
     *   data: {
     *     // ... data to create a Load
     *   }
     * })
     * 
    **/
    create<T extends LoadCreateArgs>(
      args: SelectSubset<T, LoadCreateArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load>, Prisma__LoadClient<LoadGetPayload<T>>>

    /**
     * Delete a Load.
     * @param {LoadDeleteArgs} args - Arguments to delete one Load.
     * @example
     * // Delete one Load
     * const Load = await prisma.load.delete({
     *   where: {
     *     // ... filter to delete one Load
     *   }
     * })
     * 
    **/
    delete<T extends LoadDeleteArgs>(
      args: SelectSubset<T, LoadDeleteArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load>, Prisma__LoadClient<LoadGetPayload<T>>>

    /**
     * Update one Load.
     * @param {LoadUpdateArgs} args - Arguments to update one Load.
     * @example
     * // Update one Load
     * const load = await prisma.load.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoadUpdateArgs>(
      args: SelectSubset<T, LoadUpdateArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load>, Prisma__LoadClient<LoadGetPayload<T>>>

    /**
     * Delete zero or more Loads.
     * @param {LoadDeleteManyArgs} args - Arguments to filter Loads to delete.
     * @example
     * // Delete a few Loads
     * const { count } = await prisma.load.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoadDeleteManyArgs>(
      args?: SelectSubset<T, LoadDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Loads.
     * @param {LoadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loads
     * const load = await prisma.load.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoadUpdateManyArgs>(
      args: SelectSubset<T, LoadUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Load.
     * @param {LoadUpsertArgs} args - Arguments to update or create a Load.
     * @example
     * // Update or create a Load
     * const load = await prisma.load.upsert({
     *   create: {
     *     // ... data to create a Load
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Load we want to update
     *   }
     * })
    **/
    upsert<T extends LoadUpsertArgs>(
      args: SelectSubset<T, LoadUpsertArgs>
    ): CheckSelect<T, Prisma__LoadClient<Load>, Prisma__LoadClient<LoadGetPayload<T>>>

    /**
     * Count the number of Loads.
     * @param {LoadCountArgs} args - Arguments to filter Loads to count.
     * @example
     * // Count the number of Loads
     * const count = await prisma.load.count({
     *   where: {
     *     // ... the filter for the Loads we want to count
     *   }
     * })
    **/
    count<T extends LoadCountArgs>(
      args?: Subset<T, LoadCountArgs>,
    ): Promise<
      T extends Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Load.
     * @param {LoadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoadAggregateArgs>(args: Subset<T, LoadAggregateArgs>): Promise<GetLoadAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Load.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LoadClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Load findUnique
   */
  export type LoadFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * Throw an Error if a Load can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Load to fetch.
    **/
    where: LoadWhereUniqueInput
  }


  /**
   * Load findFirst
   */
  export type LoadFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * Throw an Error if a Load can't be found
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Load to fetch.
    **/
    where?: LoadWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Loads to fetch.
    **/
    orderBy?: Enumerable<LoadOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loads.
    **/
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Loads.
    **/
    distinct?: Enumerable<LoadScalarFieldEnum>
  }


  /**
   * Load findMany
   */
  export type LoadFindManyArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * Filter, which Loads to fetch.
    **/
    where?: LoadWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Loads to fetch.
    **/
    orderBy?: Enumerable<LoadOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loads.
    **/
    cursor?: LoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loads from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loads.
    **/
    skip?: number
    distinct?: Enumerable<LoadScalarFieldEnum>
  }


  /**
   * Load create
   */
  export type LoadCreateArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * The data needed to create a Load.
    **/
    data: XOR<LoadUncheckedCreateInput, LoadCreateInput>
  }


  /**
   * Load update
   */
  export type LoadUpdateArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * The data needed to update a Load.
    **/
    data: XOR<LoadUncheckedUpdateInput, LoadUpdateInput>
    /**
     * Choose, which Load to update.
    **/
    where: LoadWhereUniqueInput
  }


  /**
   * Load updateMany
   */
  export type LoadUpdateManyArgs = {
    data: XOR<LoadUncheckedUpdateManyInput, LoadUpdateManyMutationInput>
    where?: LoadWhereInput
  }


  /**
   * Load upsert
   */
  export type LoadUpsertArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * The filter to search for the Load to update in case it exists.
    **/
    where: LoadWhereUniqueInput
    /**
     * In case the Load found by the `where` argument doesn't exist, create a new Load with this data.
    **/
    create: XOR<LoadUncheckedCreateInput, LoadCreateInput>
    /**
     * In case the Load was found with the provided `where` argument, update it with this data.
    **/
    update: XOR<LoadUncheckedUpdateInput, LoadUpdateInput>
  }


  /**
   * Load delete
   */
  export type LoadDeleteArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
    /**
     * Filter which Load to delete.
    **/
    where: LoadWhereUniqueInput
  }


  /**
   * Load deleteMany
   */
  export type LoadDeleteManyArgs = {
    where?: LoadWhereInput
  }


  /**
   * Load without action
   */
  export type LoadArgs = {
    /**
     * Select specific fields to fetch from the Load
    **/
    select?: LoadSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    login: 'login',
    password: 'password',
    roleId: 'roleId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    userId: 'userId'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    name: 'name',
    group: 'group'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    surname: 'surname',
    class: 'class',
    program: 'program'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const Teacher_Course_StudentScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    studentId: 'studentId',
    courseId: 'courseId',
    subgroup: 'subgroup'
  };

  export type Teacher_Course_StudentScalarFieldEnum = (typeof Teacher_Course_StudentScalarFieldEnum)[keyof typeof Teacher_Course_StudentScalarFieldEnum]


  export const JournalEntryScalarFieldEnum: {
    id: 'id',
    mark: 'mark',
    date: 'date',
    relationId: 'relationId'
  };

  export type JournalEntryScalarFieldEnum = (typeof JournalEntryScalarFieldEnum)[keyof typeof JournalEntryScalarFieldEnum]


  export const QuaterMarkScalarFieldEnum: {
    id: 'id',
    mark: 'mark',
    period: 'period',
    relationId: 'relationId'
  };

  export type QuaterMarkScalarFieldEnum = (typeof QuaterMarkScalarFieldEnum)[keyof typeof QuaterMarkScalarFieldEnum]


  export const ReplacementScalarFieldEnum: {
    id: 'id',
    date: 'date',
    entryId: 'entryId'
  };

  export type ReplacementScalarFieldEnum = (typeof ReplacementScalarFieldEnum)[keyof typeof ReplacementScalarFieldEnum]


  export const ConsultScalarFieldEnum: {
    id: 'id',
    date: 'date',
    period: 'period',
    year: 'year',
    relationId: 'relationId'
  };

  export type ConsultScalarFieldEnum = (typeof ConsultScalarFieldEnum)[keyof typeof ConsultScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    text: 'text',
    period: 'period',
    year: 'year',
    teacherId: 'teacherId',
    courseId: 'courseId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const LoadScalarFieldEnum: {
    id: 'id',
    course: 'course',
    class: 'class',
    program: 'program',
    hours: 'hours'
  };

  export type LoadScalarFieldEnum = (typeof LoadScalarFieldEnum)[keyof typeof LoadScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    login?: StringFilter | string
    password?: StringFilter | string
    role?: XOR<RoleWhereInput, RoleRelationFilter>
    roleId?: IntFilter | number
    teacher?: XOR<TeacherWhereInput, TeacherRelationFilter> | null
  }

  export type UserOrderByInput = {
    id?: SortOrder
    login?: SortOrder
    password?: SortOrder
    roleId?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    login?: string
  }

  export type RoleWhereInput = {
    AND?: Enumerable<RoleWhereInput>
    OR?: Enumerable<RoleWhereInput>
    NOT?: Enumerable<RoleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleWhereUniqueInput = {
    id?: number
  }

  export type TeacherWhereInput = {
    AND?: Enumerable<TeacherWhereInput>
    OR?: Enumerable<TeacherWhereInput>
    NOT?: Enumerable<TeacherWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    surname?: StringNullableFilter | string | null
    user?: XOR<UserWhereInput, UserRelationFilter> | null
    userId?: IntNullableFilter | number | null
    relations?: Teacher_Course_StudentListRelationFilter
    Note?: NoteListRelationFilter
  }

  export type TeacherOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    userId?: SortOrder
  }

  export type TeacherWhereUniqueInput = {
    id?: number
  }

  export type CourseWhereInput = {
    AND?: Enumerable<CourseWhereInput>
    OR?: Enumerable<CourseWhereInput>
    NOT?: Enumerable<CourseWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    group?: BoolFilter | boolean
    Note?: NoteListRelationFilter
    relations?: Teacher_Course_StudentListRelationFilter
  }

  export type CourseOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    group?: SortOrder
  }

  export type CourseWhereUniqueInput = {
    id?: number
  }

  export type StudentWhereInput = {
    AND?: Enumerable<StudentWhereInput>
    OR?: Enumerable<StudentWhereInput>
    NOT?: Enumerable<StudentWhereInput>
    id?: IntFilter | number
    name?: StringNullableFilter | string | null
    surname?: StringNullableFilter | string | null
    class?: IntNullableFilter | number | null
    program?: EnumProgramNullableFilter | Program | null
    relations?: Teacher_Course_StudentListRelationFilter
  }

  export type StudentOrderByInput = {
    id?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    class?: SortOrder
    program?: SortOrder
  }

  export type StudentWhereUniqueInput = {
    id?: number
  }

  export type Teacher_Course_StudentWhereInput = {
    AND?: Enumerable<Teacher_Course_StudentWhereInput>
    OR?: Enumerable<Teacher_Course_StudentWhereInput>
    NOT?: Enumerable<Teacher_Course_StudentWhereInput>
    id?: IntFilter | number
    teacher?: XOR<TeacherWhereInput, TeacherRelationFilter>
    teacherId?: IntFilter | number
    student?: XOR<StudentWhereInput, StudentRelationFilter>
    studentId?: IntFilter | number
    course?: XOR<CourseWhereInput, CourseRelationFilter>
    courseId?: IntFilter | number
    subgroup?: IntNullableFilter | number | null
    consult?: ConsultListRelationFilter
    journalEntry?: JournalEntryListRelationFilter
    quaterMark?: QuaterMarkListRelationFilter
  }

  export type Teacher_Course_StudentOrderByInput = {
    id?: SortOrder
    teacherId?: SortOrder
    studentId?: SortOrder
    courseId?: SortOrder
    subgroup?: SortOrder
  }

  export type Teacher_Course_StudentWhereUniqueInput = {
    id?: number
  }

  export type JournalEntryWhereInput = {
    AND?: Enumerable<JournalEntryWhereInput>
    OR?: Enumerable<JournalEntryWhereInput>
    NOT?: Enumerable<JournalEntryWhereInput>
    id?: IntFilter | number
    mark?: StringFilter | string
    date?: DateTimeFilter | Date | string
    relation?: XOR<Teacher_Course_StudentWhereInput, Teacher_Course_StudentRelationFilter>
    relationId?: IntFilter | number
    replacement?: XOR<ReplacementWhereInput, ReplacementRelationFilter> | null
  }

  export type JournalEntryOrderByInput = {
    id?: SortOrder
    mark?: SortOrder
    date?: SortOrder
    relationId?: SortOrder
  }

  export type JournalEntryWhereUniqueInput = {
    id?: number
  }

  export type QuaterMarkWhereInput = {
    AND?: Enumerable<QuaterMarkWhereInput>
    OR?: Enumerable<QuaterMarkWhereInput>
    NOT?: Enumerable<QuaterMarkWhereInput>
    id?: IntFilter | number
    mark?: StringFilter | string
    period?: EnumPeriodFilter | Period
    relation?: XOR<Teacher_Course_StudentWhereInput, Teacher_Course_StudentRelationFilter>
    relationId?: IntFilter | number
  }

  export type QuaterMarkOrderByInput = {
    id?: SortOrder
    mark?: SortOrder
    period?: SortOrder
    relationId?: SortOrder
  }

  export type QuaterMarkWhereUniqueInput = {
    id?: number
  }

  export type ReplacementWhereInput = {
    AND?: Enumerable<ReplacementWhereInput>
    OR?: Enumerable<ReplacementWhereInput>
    NOT?: Enumerable<ReplacementWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    journalEntry?: XOR<JournalEntryWhereInput, JournalEntryRelationFilter>
    entryId?: IntFilter | number
  }

  export type ReplacementOrderByInput = {
    id?: SortOrder
    date?: SortOrder
    entryId?: SortOrder
  }

  export type ReplacementWhereUniqueInput = {
    id?: number
  }

  export type ConsultWhereInput = {
    AND?: Enumerable<ConsultWhereInput>
    OR?: Enumerable<ConsultWhereInput>
    NOT?: Enumerable<ConsultWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    period?: EnumPeriodFilter | Period
    year?: IntFilter | number
    relation?: XOR<Teacher_Course_StudentWhereInput, Teacher_Course_StudentRelationFilter>
    relationId?: IntFilter | number
  }

  export type ConsultOrderByInput = {
    id?: SortOrder
    date?: SortOrder
    period?: SortOrder
    year?: SortOrder
    relationId?: SortOrder
  }

  export type ConsultWhereUniqueInput = {
    id?: number
  }

  export type NoteWhereInput = {
    AND?: Enumerable<NoteWhereInput>
    OR?: Enumerable<NoteWhereInput>
    NOT?: Enumerable<NoteWhereInput>
    id?: IntFilter | number
    text?: StringFilter | string
    period?: EnumPeriodFilter | Period
    year?: IntFilter | number
    teacher?: XOR<TeacherWhereInput, TeacherRelationFilter>
    teacherId?: IntFilter | number
    course?: XOR<CourseWhereInput, CourseRelationFilter>
    courseId?: IntFilter | number
  }

  export type NoteOrderByInput = {
    id?: SortOrder
    text?: SortOrder
    period?: SortOrder
    year?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
  }

  export type NoteWhereUniqueInput = {
    id?: number
  }

  export type LoadWhereInput = {
    AND?: Enumerable<LoadWhereInput>
    OR?: Enumerable<LoadWhereInput>
    NOT?: Enumerable<LoadWhereInput>
    id?: IntFilter | number
    course?: IntFilter | number
    class?: IntFilter | number
    program?: EnumProgramFilter | Program
    hours?: IntFilter | number
  }

  export type LoadOrderByInput = {
    id?: SortOrder
    course?: SortOrder
    class?: SortOrder
    program?: SortOrder
    hours?: SortOrder
  }

  export type LoadWhereUniqueInput = {
    id?: number
  }

  export type UserCreateInput = {
    login: string
    password: string
    role: RoleCreateOneWithoutUsersInput
    teacher?: TeacherCreateOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    login: string
    password: string
    roleId: number
    teacher?: TeacherUncheckedCreateOneWithoutUserInput
  }

  export type UserUpdateInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersInput
    teacher?: TeacherUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUncheckedUpdateOneWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleInput
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    name?: string | null
    surname?: string | null
    user?: UserCreateOneWithoutTeacherInput
    relations?: Teacher_Course_StudentCreateManyWithoutTeacherInput
    Note?: NoteCreateManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: number
    name?: string | null
    surname?: string | null
    userId?: number | null
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutTeacherInput
    Note?: NoteUncheckedCreateManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTeacherInput
    relations?: Teacher_Course_StudentUpdateManyWithoutTeacherInput
    Note?: NoteUpdateManyWithoutTeacherInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutTeacherInput
    Note?: NoteUncheckedUpdateManyWithoutTeacherInput
  }

  export type TeacherUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseCreateInput = {
    name?: string | null
    group?: boolean
    Note?: NoteCreateManyWithoutCourseInput
    relations?: Teacher_Course_StudentCreateManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    name?: string | null
    group?: boolean
    Note?: NoteUncheckedCreateManyWithoutCourseInput
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    Note?: NoteUpdateManyWithoutCourseInput
    relations?: Teacher_Course_StudentUpdateManyWithoutCourseInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    Note?: NoteUncheckedUpdateManyWithoutCourseInput
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutCourseInput
  }

  export type CourseUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
  }

  export type StudentCreateInput = {
    name?: string | null
    surname?: string | null
    class?: number | null
    program?: Program | null
    relations?: Teacher_Course_StudentCreateManyWithoutStudentInput
  }

  export type StudentUncheckedCreateInput = {
    id?: number
    name?: string | null
    surname?: string | null
    class?: number | null
    program?: Program | null
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutStudentInput
  }

  export type StudentUpdateInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
    relations?: Teacher_Course_StudentUpdateManyWithoutStudentInput
  }

  export type StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutStudentInput
  }

  export type StudentUpdateManyMutationInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
  }

  export type StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
  }

  export type Teacher_Course_StudentCreateInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    student: StudentCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateInput = {
    id?: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpdateInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpdateManyMutationInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type Teacher_Course_StudentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type JournalEntryCreateInput = {
    mark: string
    date: Date | string
    relation: Teacher_Course_StudentCreateOneWithoutJournalEntryInput
    replacement?: ReplacementCreateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedCreateInput = {
    id?: number
    mark: string
    date: Date | string
    relationId: number
    replacement?: ReplacementUncheckedCreateOneWithoutJournalEntryInput
  }

  export type JournalEntryUpdateInput = {
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    relation?: Teacher_Course_StudentUpdateOneRequiredWithoutJournalEntryInput
    replacement?: ReplacementUpdateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    relationId?: IntFieldUpdateOperationsInput | number
    replacement?: ReplacementUncheckedUpdateOneWithoutJournalEntryInput
  }

  export type JournalEntryUpdateManyMutationInput = {
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JournalEntryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type QuaterMarkCreateInput = {
    mark: string
    period: Period
    relation: Teacher_Course_StudentCreateOneWithoutQuaterMarkInput
  }

  export type QuaterMarkUncheckedCreateInput = {
    id?: number
    mark: string
    period: Period
    relationId: number
  }

  export type QuaterMarkUpdateInput = {
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    relation?: Teacher_Course_StudentUpdateOneRequiredWithoutQuaterMarkInput
  }

  export type QuaterMarkUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type QuaterMarkUpdateManyMutationInput = {
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
  }

  export type QuaterMarkUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type ReplacementCreateInput = {
    date: Date | string
    journalEntry: JournalEntryCreateOneWithoutReplacementInput
  }

  export type ReplacementUncheckedCreateInput = {
    id?: number
    date: Date | string
    entryId: number
  }

  export type ReplacementUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    journalEntry?: JournalEntryUpdateOneRequiredWithoutReplacementInput
  }

  export type ReplacementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    entryId?: IntFieldUpdateOperationsInput | number
  }

  export type ReplacementUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplacementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    entryId?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultCreateInput = {
    date: Date | string
    period: Period
    year: number
    relation: Teacher_Course_StudentCreateOneWithoutConsultInput
  }

  export type ConsultUncheckedCreateInput = {
    id?: number
    date: Date | string
    period: Period
    year: number
    relationId: number
  }

  export type ConsultUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    relation?: Teacher_Course_StudentUpdateOneRequiredWithoutConsultInput
  }

  export type ConsultUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type NoteCreateInput = {
    text: string
    period: Period
    year: number
    teacher: TeacherCreateOneWithoutNoteInput
    course: CourseCreateOneWithoutNoteInput
  }

  export type NoteUncheckedCreateInput = {
    id?: number
    text: string
    period: Period
    year: number
    teacherId: number
    courseId: number
  }

  export type NoteUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutNoteInput
    course?: CourseUpdateOneRequiredWithoutNoteInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type LoadCreateInput = {
    course: number
    class: number
    program: Program
    hours: number
  }

  export type LoadUncheckedCreateInput = {
    id?: number
    course: number
    class: number
    program: Program
    hours: number
  }

  export type LoadUpdateInput = {
    course?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    program?: EnumProgramFieldUpdateOperationsInput | Program
    hours?: IntFieldUpdateOperationsInput | number
  }

  export type LoadUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    program?: EnumProgramFieldUpdateOperationsInput | Program
    hours?: IntFieldUpdateOperationsInput | number
  }

  export type LoadUpdateManyMutationInput = {
    course?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    program?: EnumProgramFieldUpdateOperationsInput | Program
    hours?: IntFieldUpdateOperationsInput | number
  }

  export type LoadUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    course?: IntFieldUpdateOperationsInput | number
    class?: IntFieldUpdateOperationsInput | number
    program?: EnumProgramFieldUpdateOperationsInput | Program
    hours?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type TeacherRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Teacher_Course_StudentListRelationFilter = {
    every?: Teacher_Course_StudentWhereInput
    some?: Teacher_Course_StudentWhereInput
    none?: Teacher_Course_StudentWhereInput
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type EnumProgramNullableFilter = {
    equals?: Program | null
    in?: Enumerable<Program> | null
    notIn?: Enumerable<Program> | null
    not?: NestedEnumProgramNullableFilter | Program | null
  }

  export type StudentRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type CourseRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type ConsultListRelationFilter = {
    every?: ConsultWhereInput
    some?: ConsultWhereInput
    none?: ConsultWhereInput
  }

  export type JournalEntryListRelationFilter = {
    every?: JournalEntryWhereInput
    some?: JournalEntryWhereInput
    none?: JournalEntryWhereInput
  }

  export type QuaterMarkListRelationFilter = {
    every?: QuaterMarkWhereInput
    some?: QuaterMarkWhereInput
    none?: QuaterMarkWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Teacher_Course_StudentRelationFilter = {
    is?: Teacher_Course_StudentWhereInput
    isNot?: Teacher_Course_StudentWhereInput
  }

  export type ReplacementRelationFilter = {
    is?: ReplacementWhereInput | null
    isNot?: ReplacementWhereInput | null
  }

  export type EnumPeriodFilter = {
    equals?: Period
    in?: Enumerable<Period>
    notIn?: Enumerable<Period>
    not?: NestedEnumPeriodFilter | Period
  }

  export type JournalEntryRelationFilter = {
    is?: JournalEntryWhereInput
    isNot?: JournalEntryWhereInput
  }

  export type EnumProgramFilter = {
    equals?: Program
    in?: Enumerable<Program>
    notIn?: Enumerable<Program>
    not?: NestedEnumProgramFilter | Program
  }

  export type RoleCreateOneWithoutUsersInput = {
    create?: XOR<RoleUncheckedCreateWithoutUsersInput, RoleCreateWithoutUsersInput>
    connect?: RoleWhereUniqueInput
    connectOrCreate?: RoleCreateOrConnectWithoutusersInput
  }

  export type TeacherCreateOneWithoutUserInput = {
    create?: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
    connect?: TeacherWhereUniqueInput
    connectOrCreate?: TeacherCreateOrConnectWithoutuserInput
  }

  export type TeacherUncheckedCreateOneWithoutUserInput = {
    create?: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
    connect?: TeacherWhereUniqueInput
    connectOrCreate?: TeacherCreateOrConnectWithoutuserInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RoleUpdateOneRequiredWithoutUsersInput = {
    create?: XOR<RoleUncheckedCreateWithoutUsersInput, RoleCreateWithoutUsersInput>
    connect?: RoleWhereUniqueInput
    update?: XOR<RoleUncheckedUpdateWithoutUsersInput, RoleUpdateWithoutUsersInput>
    upsert?: RoleUpsertWithoutUsersInput
    connectOrCreate?: RoleCreateOrConnectWithoutusersInput
  }

  export type TeacherUpdateOneWithoutUserInput = {
    create?: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
    connect?: TeacherWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<TeacherUncheckedUpdateWithoutUserInput, TeacherUpdateWithoutUserInput>
    upsert?: TeacherUpsertWithoutUserInput
    connectOrCreate?: TeacherCreateOrConnectWithoutuserInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeacherUncheckedUpdateOneWithoutUserInput = {
    create?: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
    connect?: TeacherWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<TeacherUncheckedUpdateWithoutUserInput, TeacherUpdateWithoutUserInput>
    upsert?: TeacherUpsertWithoutUserInput
    connectOrCreate?: TeacherCreateOrConnectWithoutuserInput
  }

  export type UserCreateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connect?: Enumerable<UserWhereUniqueInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutroleInput>
  }

  export type UserUncheckedCreateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connect?: Enumerable<UserWhereUniqueInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutroleInput>
  }

  export type UserUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutroleInput>
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    create?: XOR<Enumerable<UserUncheckedCreateWithoutRoleInput>, Enumerable<UserCreateWithoutRoleInput>>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRoleInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRoleInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRoleInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutroleInput>
  }

  export type UserCreateOneWithoutTeacherInput = {
    create?: XOR<UserUncheckedCreateWithoutTeacherInput, UserCreateWithoutTeacherInput>
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutteacherInput
  }

  export type Teacher_Course_StudentCreateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput>, Enumerable<Teacher_Course_StudentCreateWithoutTeacherInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutteacherInput>
  }

  export type NoteCreateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutTeacherInput>, Enumerable<NoteCreateWithoutTeacherInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutteacherInput>
  }

  export type Teacher_Course_StudentUncheckedCreateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput>, Enumerable<Teacher_Course_StudentCreateWithoutTeacherInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutteacherInput>
  }

  export type NoteUncheckedCreateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutTeacherInput>, Enumerable<NoteCreateWithoutTeacherInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutteacherInput>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutTeacherInput = {
    create?: XOR<UserUncheckedCreateWithoutTeacherInput, UserCreateWithoutTeacherInput>
    connect?: UserWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<UserUncheckedUpdateWithoutTeacherInput, UserUpdateWithoutTeacherInput>
    upsert?: UserUpsertWithoutTeacherInput
    connectOrCreate?: UserCreateOrConnectWithoutteacherInput
  }

  export type Teacher_Course_StudentUpdateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput>, Enumerable<Teacher_Course_StudentCreateWithoutTeacherInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutTeacherInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutteacherInput>
  }

  export type NoteUpdateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutTeacherInput>, Enumerable<NoteCreateWithoutTeacherInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutTeacherInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutteacherInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type Teacher_Course_StudentUncheckedUpdateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput>, Enumerable<Teacher_Course_StudentCreateWithoutTeacherInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutTeacherInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutteacherInput>
  }

  export type NoteUncheckedUpdateManyWithoutTeacherInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutTeacherInput>, Enumerable<NoteCreateWithoutTeacherInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutTeacherInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutTeacherInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutTeacherInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutteacherInput>
  }

  export type NoteCreateManyWithoutCourseInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutCourseInput>, Enumerable<NoteCreateWithoutCourseInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutcourseInput>
  }

  export type Teacher_Course_StudentCreateManyWithoutCourseInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutCourseInput>, Enumerable<Teacher_Course_StudentCreateWithoutCourseInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutcourseInput>
  }

  export type NoteUncheckedCreateManyWithoutCourseInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutCourseInput>, Enumerable<NoteCreateWithoutCourseInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutcourseInput>
  }

  export type Teacher_Course_StudentUncheckedCreateManyWithoutCourseInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutCourseInput>, Enumerable<Teacher_Course_StudentCreateWithoutCourseInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutcourseInput>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NoteUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutCourseInput>, Enumerable<NoteCreateWithoutCourseInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutCourseInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutcourseInput>
  }

  export type Teacher_Course_StudentUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutCourseInput>, Enumerable<Teacher_Course_StudentCreateWithoutCourseInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutCourseInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutcourseInput>
  }

  export type NoteUncheckedUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<NoteUncheckedCreateWithoutCourseInput>, Enumerable<NoteCreateWithoutCourseInput>>
    connect?: Enumerable<NoteWhereUniqueInput>
    set?: Enumerable<NoteWhereUniqueInput>
    disconnect?: Enumerable<NoteWhereUniqueInput>
    delete?: Enumerable<NoteWhereUniqueInput>
    update?: Enumerable<NoteUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<NoteUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<NoteScalarWhereInput>
    upsert?: Enumerable<NoteUpsertWithWhereUniqueWithoutCourseInput>
    connectOrCreate?: Enumerable<NoteCreateOrConnectWithoutcourseInput>
  }

  export type Teacher_Course_StudentUncheckedUpdateManyWithoutCourseInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutCourseInput>, Enumerable<Teacher_Course_StudentCreateWithoutCourseInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutCourseInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutCourseInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutCourseInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutcourseInput>
  }

  export type Teacher_Course_StudentCreateManyWithoutStudentInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutStudentInput>, Enumerable<Teacher_Course_StudentCreateWithoutStudentInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutstudentInput>
  }

  export type Teacher_Course_StudentUncheckedCreateManyWithoutStudentInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutStudentInput>, Enumerable<Teacher_Course_StudentCreateWithoutStudentInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutstudentInput>
  }

  export type NullableEnumProgramFieldUpdateOperationsInput = {
    set?: Program | null
  }

  export type Teacher_Course_StudentUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutStudentInput>, Enumerable<Teacher_Course_StudentCreateWithoutStudentInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutStudentInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutstudentInput>
  }

  export type Teacher_Course_StudentUncheckedUpdateManyWithoutStudentInput = {
    create?: XOR<Enumerable<Teacher_Course_StudentUncheckedCreateWithoutStudentInput>, Enumerable<Teacher_Course_StudentCreateWithoutStudentInput>>
    connect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    set?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    disconnect?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    delete?: Enumerable<Teacher_Course_StudentWhereUniqueInput>
    update?: Enumerable<Teacher_Course_StudentUpdateWithWhereUniqueWithoutStudentInput>
    updateMany?: Enumerable<Teacher_Course_StudentUpdateManyWithWhereWithoutStudentInput>
    deleteMany?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    upsert?: Enumerable<Teacher_Course_StudentUpsertWithWhereUniqueWithoutStudentInput>
    connectOrCreate?: Enumerable<Teacher_Course_StudentCreateOrConnectWithoutstudentInput>
  }

  export type TeacherCreateOneWithoutRelationsInput = {
    create?: XOR<TeacherUncheckedCreateWithoutRelationsInput, TeacherCreateWithoutRelationsInput>
    connect?: TeacherWhereUniqueInput
    connectOrCreate?: TeacherCreateOrConnectWithoutrelationsInput
  }

  export type StudentCreateOneWithoutRelationsInput = {
    create?: XOR<StudentUncheckedCreateWithoutRelationsInput, StudentCreateWithoutRelationsInput>
    connect?: StudentWhereUniqueInput
    connectOrCreate?: StudentCreateOrConnectWithoutrelationsInput
  }

  export type CourseCreateOneWithoutRelationsInput = {
    create?: XOR<CourseUncheckedCreateWithoutRelationsInput, CourseCreateWithoutRelationsInput>
    connect?: CourseWhereUniqueInput
    connectOrCreate?: CourseCreateOrConnectWithoutrelationsInput
  }

  export type ConsultCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<ConsultUncheckedCreateWithoutRelationInput>, Enumerable<ConsultCreateWithoutRelationInput>>
    connect?: Enumerable<ConsultWhereUniqueInput>
    connectOrCreate?: Enumerable<ConsultCreateOrConnectWithoutrelationInput>
  }

  export type JournalEntryCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<JournalEntryUncheckedCreateWithoutRelationInput>, Enumerable<JournalEntryCreateWithoutRelationInput>>
    connect?: Enumerable<JournalEntryWhereUniqueInput>
    connectOrCreate?: Enumerable<JournalEntryCreateOrConnectWithoutrelationInput>
  }

  export type QuaterMarkCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<QuaterMarkUncheckedCreateWithoutRelationInput>, Enumerable<QuaterMarkCreateWithoutRelationInput>>
    connect?: Enumerable<QuaterMarkWhereUniqueInput>
    connectOrCreate?: Enumerable<QuaterMarkCreateOrConnectWithoutrelationInput>
  }

  export type ConsultUncheckedCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<ConsultUncheckedCreateWithoutRelationInput>, Enumerable<ConsultCreateWithoutRelationInput>>
    connect?: Enumerable<ConsultWhereUniqueInput>
    connectOrCreate?: Enumerable<ConsultCreateOrConnectWithoutrelationInput>
  }

  export type JournalEntryUncheckedCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<JournalEntryUncheckedCreateWithoutRelationInput>, Enumerable<JournalEntryCreateWithoutRelationInput>>
    connect?: Enumerable<JournalEntryWhereUniqueInput>
    connectOrCreate?: Enumerable<JournalEntryCreateOrConnectWithoutrelationInput>
  }

  export type QuaterMarkUncheckedCreateManyWithoutRelationInput = {
    create?: XOR<Enumerable<QuaterMarkUncheckedCreateWithoutRelationInput>, Enumerable<QuaterMarkCreateWithoutRelationInput>>
    connect?: Enumerable<QuaterMarkWhereUniqueInput>
    connectOrCreate?: Enumerable<QuaterMarkCreateOrConnectWithoutrelationInput>
  }

  export type TeacherUpdateOneRequiredWithoutRelationsInput = {
    create?: XOR<TeacherUncheckedCreateWithoutRelationsInput, TeacherCreateWithoutRelationsInput>
    connect?: TeacherWhereUniqueInput
    update?: XOR<TeacherUncheckedUpdateWithoutRelationsInput, TeacherUpdateWithoutRelationsInput>
    upsert?: TeacherUpsertWithoutRelationsInput
    connectOrCreate?: TeacherCreateOrConnectWithoutrelationsInput
  }

  export type StudentUpdateOneRequiredWithoutRelationsInput = {
    create?: XOR<StudentUncheckedCreateWithoutRelationsInput, StudentCreateWithoutRelationsInput>
    connect?: StudentWhereUniqueInput
    update?: XOR<StudentUncheckedUpdateWithoutRelationsInput, StudentUpdateWithoutRelationsInput>
    upsert?: StudentUpsertWithoutRelationsInput
    connectOrCreate?: StudentCreateOrConnectWithoutrelationsInput
  }

  export type CourseUpdateOneRequiredWithoutRelationsInput = {
    create?: XOR<CourseUncheckedCreateWithoutRelationsInput, CourseCreateWithoutRelationsInput>
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUncheckedUpdateWithoutRelationsInput, CourseUpdateWithoutRelationsInput>
    upsert?: CourseUpsertWithoutRelationsInput
    connectOrCreate?: CourseCreateOrConnectWithoutrelationsInput
  }

  export type ConsultUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<ConsultUncheckedCreateWithoutRelationInput>, Enumerable<ConsultCreateWithoutRelationInput>>
    connect?: Enumerable<ConsultWhereUniqueInput>
    set?: Enumerable<ConsultWhereUniqueInput>
    disconnect?: Enumerable<ConsultWhereUniqueInput>
    delete?: Enumerable<ConsultWhereUniqueInput>
    update?: Enumerable<ConsultUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<ConsultUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<ConsultScalarWhereInput>
    upsert?: Enumerable<ConsultUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<ConsultCreateOrConnectWithoutrelationInput>
  }

  export type JournalEntryUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<JournalEntryUncheckedCreateWithoutRelationInput>, Enumerable<JournalEntryCreateWithoutRelationInput>>
    connect?: Enumerable<JournalEntryWhereUniqueInput>
    set?: Enumerable<JournalEntryWhereUniqueInput>
    disconnect?: Enumerable<JournalEntryWhereUniqueInput>
    delete?: Enumerable<JournalEntryWhereUniqueInput>
    update?: Enumerable<JournalEntryUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<JournalEntryUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<JournalEntryScalarWhereInput>
    upsert?: Enumerable<JournalEntryUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<JournalEntryCreateOrConnectWithoutrelationInput>
  }

  export type QuaterMarkUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<QuaterMarkUncheckedCreateWithoutRelationInput>, Enumerable<QuaterMarkCreateWithoutRelationInput>>
    connect?: Enumerable<QuaterMarkWhereUniqueInput>
    set?: Enumerable<QuaterMarkWhereUniqueInput>
    disconnect?: Enumerable<QuaterMarkWhereUniqueInput>
    delete?: Enumerable<QuaterMarkWhereUniqueInput>
    update?: Enumerable<QuaterMarkUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<QuaterMarkUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<QuaterMarkScalarWhereInput>
    upsert?: Enumerable<QuaterMarkUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<QuaterMarkCreateOrConnectWithoutrelationInput>
  }

  export type ConsultUncheckedUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<ConsultUncheckedCreateWithoutRelationInput>, Enumerable<ConsultCreateWithoutRelationInput>>
    connect?: Enumerable<ConsultWhereUniqueInput>
    set?: Enumerable<ConsultWhereUniqueInput>
    disconnect?: Enumerable<ConsultWhereUniqueInput>
    delete?: Enumerable<ConsultWhereUniqueInput>
    update?: Enumerable<ConsultUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<ConsultUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<ConsultScalarWhereInput>
    upsert?: Enumerable<ConsultUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<ConsultCreateOrConnectWithoutrelationInput>
  }

  export type JournalEntryUncheckedUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<JournalEntryUncheckedCreateWithoutRelationInput>, Enumerable<JournalEntryCreateWithoutRelationInput>>
    connect?: Enumerable<JournalEntryWhereUniqueInput>
    set?: Enumerable<JournalEntryWhereUniqueInput>
    disconnect?: Enumerable<JournalEntryWhereUniqueInput>
    delete?: Enumerable<JournalEntryWhereUniqueInput>
    update?: Enumerable<JournalEntryUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<JournalEntryUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<JournalEntryScalarWhereInput>
    upsert?: Enumerable<JournalEntryUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<JournalEntryCreateOrConnectWithoutrelationInput>
  }

  export type QuaterMarkUncheckedUpdateManyWithoutRelationInput = {
    create?: XOR<Enumerable<QuaterMarkUncheckedCreateWithoutRelationInput>, Enumerable<QuaterMarkCreateWithoutRelationInput>>
    connect?: Enumerable<QuaterMarkWhereUniqueInput>
    set?: Enumerable<QuaterMarkWhereUniqueInput>
    disconnect?: Enumerable<QuaterMarkWhereUniqueInput>
    delete?: Enumerable<QuaterMarkWhereUniqueInput>
    update?: Enumerable<QuaterMarkUpdateWithWhereUniqueWithoutRelationInput>
    updateMany?: Enumerable<QuaterMarkUpdateManyWithWhereWithoutRelationInput>
    deleteMany?: Enumerable<QuaterMarkScalarWhereInput>
    upsert?: Enumerable<QuaterMarkUpsertWithWhereUniqueWithoutRelationInput>
    connectOrCreate?: Enumerable<QuaterMarkCreateOrConnectWithoutrelationInput>
  }

  export type Teacher_Course_StudentCreateOneWithoutJournalEntryInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutJournalEntryInput, Teacher_Course_StudentCreateWithoutJournalEntryInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutjournalEntryInput
  }

  export type ReplacementCreateOneWithoutJournalEntryInput = {
    create?: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
    connect?: ReplacementWhereUniqueInput
    connectOrCreate?: ReplacementCreateOrConnectWithoutjournalEntryInput
  }

  export type ReplacementUncheckedCreateOneWithoutJournalEntryInput = {
    create?: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
    connect?: ReplacementWhereUniqueInput
    connectOrCreate?: ReplacementCreateOrConnectWithoutjournalEntryInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Teacher_Course_StudentUpdateOneRequiredWithoutJournalEntryInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutJournalEntryInput, Teacher_Course_StudentCreateWithoutJournalEntryInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    update?: XOR<Teacher_Course_StudentUncheckedUpdateWithoutJournalEntryInput, Teacher_Course_StudentUpdateWithoutJournalEntryInput>
    upsert?: Teacher_Course_StudentUpsertWithoutJournalEntryInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutjournalEntryInput
  }

  export type ReplacementUpdateOneWithoutJournalEntryInput = {
    create?: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
    connect?: ReplacementWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ReplacementUncheckedUpdateWithoutJournalEntryInput, ReplacementUpdateWithoutJournalEntryInput>
    upsert?: ReplacementUpsertWithoutJournalEntryInput
    connectOrCreate?: ReplacementCreateOrConnectWithoutjournalEntryInput
  }

  export type ReplacementUncheckedUpdateOneWithoutJournalEntryInput = {
    create?: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
    connect?: ReplacementWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: XOR<ReplacementUncheckedUpdateWithoutJournalEntryInput, ReplacementUpdateWithoutJournalEntryInput>
    upsert?: ReplacementUpsertWithoutJournalEntryInput
    connectOrCreate?: ReplacementCreateOrConnectWithoutjournalEntryInput
  }

  export type Teacher_Course_StudentCreateOneWithoutQuaterMarkInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutQuaterMarkInput, Teacher_Course_StudentCreateWithoutQuaterMarkInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutquaterMarkInput
  }

  export type EnumPeriodFieldUpdateOperationsInput = {
    set?: Period
  }

  export type Teacher_Course_StudentUpdateOneRequiredWithoutQuaterMarkInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutQuaterMarkInput, Teacher_Course_StudentCreateWithoutQuaterMarkInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    update?: XOR<Teacher_Course_StudentUncheckedUpdateWithoutQuaterMarkInput, Teacher_Course_StudentUpdateWithoutQuaterMarkInput>
    upsert?: Teacher_Course_StudentUpsertWithoutQuaterMarkInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutquaterMarkInput
  }

  export type JournalEntryCreateOneWithoutReplacementInput = {
    create?: XOR<JournalEntryUncheckedCreateWithoutReplacementInput, JournalEntryCreateWithoutReplacementInput>
    connect?: JournalEntryWhereUniqueInput
    connectOrCreate?: JournalEntryCreateOrConnectWithoutreplacementInput
  }

  export type JournalEntryUpdateOneRequiredWithoutReplacementInput = {
    create?: XOR<JournalEntryUncheckedCreateWithoutReplacementInput, JournalEntryCreateWithoutReplacementInput>
    connect?: JournalEntryWhereUniqueInput
    update?: XOR<JournalEntryUncheckedUpdateWithoutReplacementInput, JournalEntryUpdateWithoutReplacementInput>
    upsert?: JournalEntryUpsertWithoutReplacementInput
    connectOrCreate?: JournalEntryCreateOrConnectWithoutreplacementInput
  }

  export type Teacher_Course_StudentCreateOneWithoutConsultInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutConsultInput, Teacher_Course_StudentCreateWithoutConsultInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutconsultInput
  }

  export type Teacher_Course_StudentUpdateOneRequiredWithoutConsultInput = {
    create?: XOR<Teacher_Course_StudentUncheckedCreateWithoutConsultInput, Teacher_Course_StudentCreateWithoutConsultInput>
    connect?: Teacher_Course_StudentWhereUniqueInput
    update?: XOR<Teacher_Course_StudentUncheckedUpdateWithoutConsultInput, Teacher_Course_StudentUpdateWithoutConsultInput>
    upsert?: Teacher_Course_StudentUpsertWithoutConsultInput
    connectOrCreate?: Teacher_Course_StudentCreateOrConnectWithoutconsultInput
  }

  export type TeacherCreateOneWithoutNoteInput = {
    create?: XOR<TeacherUncheckedCreateWithoutNoteInput, TeacherCreateWithoutNoteInput>
    connect?: TeacherWhereUniqueInput
    connectOrCreate?: TeacherCreateOrConnectWithoutNoteInput
  }

  export type CourseCreateOneWithoutNoteInput = {
    create?: XOR<CourseUncheckedCreateWithoutNoteInput, CourseCreateWithoutNoteInput>
    connect?: CourseWhereUniqueInput
    connectOrCreate?: CourseCreateOrConnectWithoutNoteInput
  }

  export type TeacherUpdateOneRequiredWithoutNoteInput = {
    create?: XOR<TeacherUncheckedCreateWithoutNoteInput, TeacherCreateWithoutNoteInput>
    connect?: TeacherWhereUniqueInput
    update?: XOR<TeacherUncheckedUpdateWithoutNoteInput, TeacherUpdateWithoutNoteInput>
    upsert?: TeacherUpsertWithoutNoteInput
    connectOrCreate?: TeacherCreateOrConnectWithoutNoteInput
  }

  export type CourseUpdateOneRequiredWithoutNoteInput = {
    create?: XOR<CourseUncheckedCreateWithoutNoteInput, CourseCreateWithoutNoteInput>
    connect?: CourseWhereUniqueInput
    update?: XOR<CourseUncheckedUpdateWithoutNoteInput, CourseUpdateWithoutNoteInput>
    upsert?: CourseUpsertWithoutNoteInput
    connectOrCreate?: CourseCreateOrConnectWithoutNoteInput
  }

  export type EnumProgramFieldUpdateOperationsInput = {
    set?: Program
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumProgramNullableFilter = {
    equals?: Program | null
    in?: Enumerable<Program> | null
    notIn?: Enumerable<Program> | null
    not?: NestedEnumProgramNullableFilter | Program | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumPeriodFilter = {
    equals?: Period
    in?: Enumerable<Period>
    notIn?: Enumerable<Period>
    not?: NestedEnumPeriodFilter | Period
  }

  export type NestedEnumProgramFilter = {
    equals?: Program
    in?: Enumerable<Program>
    notIn?: Enumerable<Program>
    not?: NestedEnumProgramFilter | Program
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type RoleCreateOrConnectWithoutusersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleUncheckedCreateWithoutUsersInput, RoleCreateWithoutUsersInput>
  }

  export type TeacherCreateWithoutUserInput = {
    name?: string | null
    surname?: string | null
    relations?: Teacher_Course_StudentCreateManyWithoutTeacherInput
    Note?: NoteCreateManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutUserInput = {
    id?: number
    name?: string | null
    surname?: string | null
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutTeacherInput
    Note?: NoteUncheckedCreateManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutuserInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUncheckedUpdateWithoutUsersInput, RoleUpdateWithoutUsersInput>
    create: XOR<RoleUncheckedCreateWithoutUsersInput, RoleCreateWithoutUsersInput>
  }

  export type TeacherUpdateWithoutUserInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    relations?: Teacher_Course_StudentUpdateManyWithoutTeacherInput
    Note?: NoteUpdateManyWithoutTeacherInput
  }

  export type TeacherUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutTeacherInput
    Note?: NoteUncheckedUpdateManyWithoutTeacherInput
  }

  export type TeacherUpsertWithoutUserInput = {
    update: XOR<TeacherUncheckedUpdateWithoutUserInput, TeacherUpdateWithoutUserInput>
    create: XOR<TeacherUncheckedCreateWithoutUserInput, TeacherCreateWithoutUserInput>
  }

  export type UserCreateWithoutRoleInput = {
    login: string
    password: string
    teacher?: TeacherCreateOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    login: string
    password: string
    teacher?: TeacherUncheckedCreateOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutroleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutRoleInput, UserCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUncheckedUpdateWithoutRoleInput, UserUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUncheckedUpdateManyWithoutUsersInput, UserUpdateManyMutationInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    login?: StringFilter | string
    password?: StringFilter | string
    roleId?: IntFilter | number
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUncheckedUpdateWithoutRoleInput, UserUpdateWithoutRoleInput>
    create: XOR<UserUncheckedCreateWithoutRoleInput, UserCreateWithoutRoleInput>
  }

  export type UserCreateWithoutTeacherInput = {
    login: string
    password: string
    role: RoleCreateOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutTeacherInput = {
    id?: number
    login: string
    password: string
    roleId: number
  }

  export type UserCreateOrConnectWithoutteacherInput = {
    where: UserWhereUniqueInput
    create: XOR<UserUncheckedCreateWithoutTeacherInput, UserCreateWithoutTeacherInput>
  }

  export type Teacher_Course_StudentCreateWithoutTeacherInput = {
    subgroup?: number | null
    student: StudentCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutTeacherInput = {
    id?: number
    studentId: number
    courseId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutteacherInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput, Teacher_Course_StudentCreateWithoutTeacherInput>
  }

  export type NoteCreateWithoutTeacherInput = {
    text: string
    period: Period
    year: number
    course: CourseCreateOneWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutTeacherInput = {
    id?: number
    text: string
    period: Period
    year: number
    courseId: number
  }

  export type NoteCreateOrConnectWithoutteacherInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteUncheckedCreateWithoutTeacherInput, NoteCreateWithoutTeacherInput>
  }

  export type UserUpdateWithoutTeacherInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersInput
  }

  export type UserUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutTeacherInput = {
    update: XOR<UserUncheckedUpdateWithoutTeacherInput, UserUpdateWithoutTeacherInput>
    create: XOR<UserUncheckedCreateWithoutTeacherInput, UserCreateWithoutTeacherInput>
  }

  export type Teacher_Course_StudentUpdateWithWhereUniqueWithoutTeacherInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateWithoutTeacherInput, Teacher_Course_StudentUpdateWithoutTeacherInput>
  }

  export type Teacher_Course_StudentUpdateManyWithWhereWithoutTeacherInput = {
    where: Teacher_Course_StudentScalarWhereInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateManyWithoutRelationsInput, Teacher_Course_StudentUpdateManyMutationInput>
  }

  export type Teacher_Course_StudentScalarWhereInput = {
    AND?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    OR?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    NOT?: Enumerable<Teacher_Course_StudentScalarWhereInput>
    id?: IntFilter | number
    teacherId?: IntFilter | number
    studentId?: IntFilter | number
    courseId?: IntFilter | number
    subgroup?: IntNullableFilter | number | null
  }

  export type Teacher_Course_StudentUpsertWithWhereUniqueWithoutTeacherInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutTeacherInput, Teacher_Course_StudentUpdateWithoutTeacherInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutTeacherInput, Teacher_Course_StudentCreateWithoutTeacherInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutTeacherInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUncheckedUpdateWithoutTeacherInput, NoteUpdateWithoutTeacherInput>
  }

  export type NoteUpdateManyWithWhereWithoutTeacherInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUncheckedUpdateManyWithoutNoteInput, NoteUpdateManyMutationInput>
  }

  export type NoteScalarWhereInput = {
    AND?: Enumerable<NoteScalarWhereInput>
    OR?: Enumerable<NoteScalarWhereInput>
    NOT?: Enumerable<NoteScalarWhereInput>
    id?: IntFilter | number
    text?: StringFilter | string
    period?: EnumPeriodFilter | Period
    year?: IntFilter | number
    teacherId?: IntFilter | number
    courseId?: IntFilter | number
  }

  export type NoteUpsertWithWhereUniqueWithoutTeacherInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUncheckedUpdateWithoutTeacherInput, NoteUpdateWithoutTeacherInput>
    create: XOR<NoteUncheckedCreateWithoutTeacherInput, NoteCreateWithoutTeacherInput>
  }

  export type NoteCreateWithoutCourseInput = {
    text: string
    period: Period
    year: number
    teacher: TeacherCreateOneWithoutNoteInput
  }

  export type NoteUncheckedCreateWithoutCourseInput = {
    id?: number
    text: string
    period: Period
    year: number
    teacherId: number
  }

  export type NoteCreateOrConnectWithoutcourseInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteUncheckedCreateWithoutCourseInput, NoteCreateWithoutCourseInput>
  }

  export type Teacher_Course_StudentCreateWithoutCourseInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    student: StudentCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutCourseInput = {
    id?: number
    teacherId: number
    studentId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutcourseInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutCourseInput, Teacher_Course_StudentCreateWithoutCourseInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutCourseInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUncheckedUpdateWithoutCourseInput, NoteUpdateWithoutCourseInput>
  }

  export type NoteUpdateManyWithWhereWithoutCourseInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUncheckedUpdateManyWithoutNoteInput, NoteUpdateManyMutationInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutCourseInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUncheckedUpdateWithoutCourseInput, NoteUpdateWithoutCourseInput>
    create: XOR<NoteUncheckedCreateWithoutCourseInput, NoteCreateWithoutCourseInput>
  }

  export type Teacher_Course_StudentUpdateWithWhereUniqueWithoutCourseInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateWithoutCourseInput, Teacher_Course_StudentUpdateWithoutCourseInput>
  }

  export type Teacher_Course_StudentUpdateManyWithWhereWithoutCourseInput = {
    where: Teacher_Course_StudentScalarWhereInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateManyWithoutRelationsInput, Teacher_Course_StudentUpdateManyMutationInput>
  }

  export type Teacher_Course_StudentUpsertWithWhereUniqueWithoutCourseInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutCourseInput, Teacher_Course_StudentUpdateWithoutCourseInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutCourseInput, Teacher_Course_StudentCreateWithoutCourseInput>
  }

  export type Teacher_Course_StudentCreateWithoutStudentInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutStudentInput = {
    id?: number
    teacherId: number
    courseId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutstudentInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutStudentInput, Teacher_Course_StudentCreateWithoutStudentInput>
  }

  export type Teacher_Course_StudentUpdateWithWhereUniqueWithoutStudentInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateWithoutStudentInput, Teacher_Course_StudentUpdateWithoutStudentInput>
  }

  export type Teacher_Course_StudentUpdateManyWithWhereWithoutStudentInput = {
    where: Teacher_Course_StudentScalarWhereInput
    data: XOR<Teacher_Course_StudentUncheckedUpdateManyWithoutRelationsInput, Teacher_Course_StudentUpdateManyMutationInput>
  }

  export type Teacher_Course_StudentUpsertWithWhereUniqueWithoutStudentInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutStudentInput, Teacher_Course_StudentUpdateWithoutStudentInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutStudentInput, Teacher_Course_StudentCreateWithoutStudentInput>
  }

  export type TeacherCreateWithoutRelationsInput = {
    name?: string | null
    surname?: string | null
    user?: UserCreateOneWithoutTeacherInput
    Note?: NoteCreateManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutRelationsInput = {
    id?: number
    name?: string | null
    surname?: string | null
    userId?: number | null
    Note?: NoteUncheckedCreateManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutrelationsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherUncheckedCreateWithoutRelationsInput, TeacherCreateWithoutRelationsInput>
  }

  export type StudentCreateWithoutRelationsInput = {
    name?: string | null
    surname?: string | null
    class?: number | null
    program?: Program | null
  }

  export type StudentUncheckedCreateWithoutRelationsInput = {
    id?: number
    name?: string | null
    surname?: string | null
    class?: number | null
    program?: Program | null
  }

  export type StudentCreateOrConnectWithoutrelationsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentUncheckedCreateWithoutRelationsInput, StudentCreateWithoutRelationsInput>
  }

  export type CourseCreateWithoutRelationsInput = {
    name?: string | null
    group?: boolean
    Note?: NoteCreateManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutRelationsInput = {
    id?: number
    name?: string | null
    group?: boolean
    Note?: NoteUncheckedCreateManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutrelationsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseUncheckedCreateWithoutRelationsInput, CourseCreateWithoutRelationsInput>
  }

  export type ConsultCreateWithoutRelationInput = {
    date: Date | string
    period: Period
    year: number
  }

  export type ConsultUncheckedCreateWithoutRelationInput = {
    id?: number
    date: Date | string
    period: Period
    year: number
  }

  export type ConsultCreateOrConnectWithoutrelationInput = {
    where: ConsultWhereUniqueInput
    create: XOR<ConsultUncheckedCreateWithoutRelationInput, ConsultCreateWithoutRelationInput>
  }

  export type JournalEntryCreateWithoutRelationInput = {
    mark: string
    date: Date | string
    replacement?: ReplacementCreateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedCreateWithoutRelationInput = {
    id?: number
    mark: string
    date: Date | string
    replacement?: ReplacementUncheckedCreateOneWithoutJournalEntryInput
  }

  export type JournalEntryCreateOrConnectWithoutrelationInput = {
    where: JournalEntryWhereUniqueInput
    create: XOR<JournalEntryUncheckedCreateWithoutRelationInput, JournalEntryCreateWithoutRelationInput>
  }

  export type QuaterMarkCreateWithoutRelationInput = {
    mark: string
    period: Period
  }

  export type QuaterMarkUncheckedCreateWithoutRelationInput = {
    id?: number
    mark: string
    period: Period
  }

  export type QuaterMarkCreateOrConnectWithoutrelationInput = {
    where: QuaterMarkWhereUniqueInput
    create: XOR<QuaterMarkUncheckedCreateWithoutRelationInput, QuaterMarkCreateWithoutRelationInput>
  }

  export type TeacherUpdateWithoutRelationsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTeacherInput
    Note?: NoteUpdateManyWithoutTeacherInput
  }

  export type TeacherUncheckedUpdateWithoutRelationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    Note?: NoteUncheckedUpdateManyWithoutTeacherInput
  }

  export type TeacherUpsertWithoutRelationsInput = {
    update: XOR<TeacherUncheckedUpdateWithoutRelationsInput, TeacherUpdateWithoutRelationsInput>
    create: XOR<TeacherUncheckedCreateWithoutRelationsInput, TeacherCreateWithoutRelationsInput>
  }

  export type StudentUpdateWithoutRelationsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
  }

  export type StudentUncheckedUpdateWithoutRelationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableIntFieldUpdateOperationsInput | number | null
    program?: NullableEnumProgramFieldUpdateOperationsInput | Program | null
  }

  export type StudentUpsertWithoutRelationsInput = {
    update: XOR<StudentUncheckedUpdateWithoutRelationsInput, StudentUpdateWithoutRelationsInput>
    create: XOR<StudentUncheckedCreateWithoutRelationsInput, StudentCreateWithoutRelationsInput>
  }

  export type CourseUpdateWithoutRelationsInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    Note?: NoteUpdateManyWithoutCourseInput
  }

  export type CourseUncheckedUpdateWithoutRelationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    Note?: NoteUncheckedUpdateManyWithoutCourseInput
  }

  export type CourseUpsertWithoutRelationsInput = {
    update: XOR<CourseUncheckedUpdateWithoutRelationsInput, CourseUpdateWithoutRelationsInput>
    create: XOR<CourseUncheckedCreateWithoutRelationsInput, CourseCreateWithoutRelationsInput>
  }

  export type ConsultUpdateWithWhereUniqueWithoutRelationInput = {
    where: ConsultWhereUniqueInput
    data: XOR<ConsultUncheckedUpdateWithoutRelationInput, ConsultUpdateWithoutRelationInput>
  }

  export type ConsultUpdateManyWithWhereWithoutRelationInput = {
    where: ConsultScalarWhereInput
    data: XOR<ConsultUncheckedUpdateManyWithoutConsultInput, ConsultUpdateManyMutationInput>
  }

  export type ConsultScalarWhereInput = {
    AND?: Enumerable<ConsultScalarWhereInput>
    OR?: Enumerable<ConsultScalarWhereInput>
    NOT?: Enumerable<ConsultScalarWhereInput>
    id?: IntFilter | number
    date?: DateTimeFilter | Date | string
    period?: EnumPeriodFilter | Period
    year?: IntFilter | number
    relationId?: IntFilter | number
  }

  export type ConsultUpsertWithWhereUniqueWithoutRelationInput = {
    where: ConsultWhereUniqueInput
    update: XOR<ConsultUncheckedUpdateWithoutRelationInput, ConsultUpdateWithoutRelationInput>
    create: XOR<ConsultUncheckedCreateWithoutRelationInput, ConsultCreateWithoutRelationInput>
  }

  export type JournalEntryUpdateWithWhereUniqueWithoutRelationInput = {
    where: JournalEntryWhereUniqueInput
    data: XOR<JournalEntryUncheckedUpdateWithoutRelationInput, JournalEntryUpdateWithoutRelationInput>
  }

  export type JournalEntryUpdateManyWithWhereWithoutRelationInput = {
    where: JournalEntryScalarWhereInput
    data: XOR<JournalEntryUncheckedUpdateManyWithoutJournalEntryInput, JournalEntryUpdateManyMutationInput>
  }

  export type JournalEntryScalarWhereInput = {
    AND?: Enumerable<JournalEntryScalarWhereInput>
    OR?: Enumerable<JournalEntryScalarWhereInput>
    NOT?: Enumerable<JournalEntryScalarWhereInput>
    id?: IntFilter | number
    mark?: StringFilter | string
    date?: DateTimeFilter | Date | string
    relationId?: IntFilter | number
  }

  export type JournalEntryUpsertWithWhereUniqueWithoutRelationInput = {
    where: JournalEntryWhereUniqueInput
    update: XOR<JournalEntryUncheckedUpdateWithoutRelationInput, JournalEntryUpdateWithoutRelationInput>
    create: XOR<JournalEntryUncheckedCreateWithoutRelationInput, JournalEntryCreateWithoutRelationInput>
  }

  export type QuaterMarkUpdateWithWhereUniqueWithoutRelationInput = {
    where: QuaterMarkWhereUniqueInput
    data: XOR<QuaterMarkUncheckedUpdateWithoutRelationInput, QuaterMarkUpdateWithoutRelationInput>
  }

  export type QuaterMarkUpdateManyWithWhereWithoutRelationInput = {
    where: QuaterMarkScalarWhereInput
    data: XOR<QuaterMarkUncheckedUpdateManyWithoutQuaterMarkInput, QuaterMarkUpdateManyMutationInput>
  }

  export type QuaterMarkScalarWhereInput = {
    AND?: Enumerable<QuaterMarkScalarWhereInput>
    OR?: Enumerable<QuaterMarkScalarWhereInput>
    NOT?: Enumerable<QuaterMarkScalarWhereInput>
    id?: IntFilter | number
    mark?: StringFilter | string
    period?: EnumPeriodFilter | Period
    relationId?: IntFilter | number
  }

  export type QuaterMarkUpsertWithWhereUniqueWithoutRelationInput = {
    where: QuaterMarkWhereUniqueInput
    update: XOR<QuaterMarkUncheckedUpdateWithoutRelationInput, QuaterMarkUpdateWithoutRelationInput>
    create: XOR<QuaterMarkUncheckedCreateWithoutRelationInput, QuaterMarkCreateWithoutRelationInput>
  }

  export type Teacher_Course_StudentCreateWithoutJournalEntryInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    student: StudentCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutJournalEntryInput = {
    id?: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutjournalEntryInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutJournalEntryInput, Teacher_Course_StudentCreateWithoutJournalEntryInput>
  }

  export type ReplacementCreateWithoutJournalEntryInput = {
    date: Date | string
  }

  export type ReplacementUncheckedCreateWithoutJournalEntryInput = {
    id?: number
    date: Date | string
  }

  export type ReplacementCreateOrConnectWithoutjournalEntryInput = {
    where: ReplacementWhereUniqueInput
    create: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
  }

  export type Teacher_Course_StudentUpdateWithoutJournalEntryInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutJournalEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpsertWithoutJournalEntryInput = {
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutJournalEntryInput, Teacher_Course_StudentUpdateWithoutJournalEntryInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutJournalEntryInput, Teacher_Course_StudentCreateWithoutJournalEntryInput>
  }

  export type ReplacementUpdateWithoutJournalEntryInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplacementUncheckedUpdateWithoutJournalEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReplacementUpsertWithoutJournalEntryInput = {
    update: XOR<ReplacementUncheckedUpdateWithoutJournalEntryInput, ReplacementUpdateWithoutJournalEntryInput>
    create: XOR<ReplacementUncheckedCreateWithoutJournalEntryInput, ReplacementCreateWithoutJournalEntryInput>
  }

  export type Teacher_Course_StudentCreateWithoutQuaterMarkInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    student: StudentCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    consult?: ConsultCreateManyWithoutRelationInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutQuaterMarkInput = {
    id?: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup?: number | null
    consult?: ConsultUncheckedCreateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutquaterMarkInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutQuaterMarkInput, Teacher_Course_StudentCreateWithoutQuaterMarkInput>
  }

  export type Teacher_Course_StudentUpdateWithoutQuaterMarkInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutQuaterMarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpsertWithoutQuaterMarkInput = {
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutQuaterMarkInput, Teacher_Course_StudentUpdateWithoutQuaterMarkInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutQuaterMarkInput, Teacher_Course_StudentCreateWithoutQuaterMarkInput>
  }

  export type JournalEntryCreateWithoutReplacementInput = {
    mark: string
    date: Date | string
    relation: Teacher_Course_StudentCreateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedCreateWithoutReplacementInput = {
    id?: number
    mark: string
    date: Date | string
    relationId: number
  }

  export type JournalEntryCreateOrConnectWithoutreplacementInput = {
    where: JournalEntryWhereUniqueInput
    create: XOR<JournalEntryUncheckedCreateWithoutReplacementInput, JournalEntryCreateWithoutReplacementInput>
  }

  export type JournalEntryUpdateWithoutReplacementInput = {
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    relation?: Teacher_Course_StudentUpdateOneRequiredWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedUpdateWithoutReplacementInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    relationId?: IntFieldUpdateOperationsInput | number
  }

  export type JournalEntryUpsertWithoutReplacementInput = {
    update: XOR<JournalEntryUncheckedUpdateWithoutReplacementInput, JournalEntryUpdateWithoutReplacementInput>
    create: XOR<JournalEntryUncheckedCreateWithoutReplacementInput, JournalEntryCreateWithoutReplacementInput>
  }

  export type Teacher_Course_StudentCreateWithoutConsultInput = {
    subgroup?: number | null
    teacher: TeacherCreateOneWithoutRelationsInput
    student: StudentCreateOneWithoutRelationsInput
    course: CourseCreateOneWithoutRelationsInput
    journalEntry?: JournalEntryCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedCreateWithoutConsultInput = {
    id?: number
    teacherId: number
    studentId: number
    courseId: number
    subgroup?: number | null
    journalEntry?: JournalEntryUncheckedCreateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedCreateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentCreateOrConnectWithoutconsultInput = {
    where: Teacher_Course_StudentWhereUniqueInput
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutConsultInput, Teacher_Course_StudentCreateWithoutConsultInput>
  }

  export type Teacher_Course_StudentUpdateWithoutConsultInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutConsultInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpsertWithoutConsultInput = {
    update: XOR<Teacher_Course_StudentUncheckedUpdateWithoutConsultInput, Teacher_Course_StudentUpdateWithoutConsultInput>
    create: XOR<Teacher_Course_StudentUncheckedCreateWithoutConsultInput, Teacher_Course_StudentCreateWithoutConsultInput>
  }

  export type TeacherCreateWithoutNoteInput = {
    name?: string | null
    surname?: string | null
    user?: UserCreateOneWithoutTeacherInput
    relations?: Teacher_Course_StudentCreateManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutNoteInput = {
    id?: number
    name?: string | null
    surname?: string | null
    userId?: number | null
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutNoteInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherUncheckedCreateWithoutNoteInput, TeacherCreateWithoutNoteInput>
  }

  export type CourseCreateWithoutNoteInput = {
    name?: string | null
    group?: boolean
    relations?: Teacher_Course_StudentCreateManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutNoteInput = {
    id?: number
    name?: string | null
    group?: boolean
    relations?: Teacher_Course_StudentUncheckedCreateManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutNoteInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseUncheckedCreateWithoutNoteInput, CourseCreateWithoutNoteInput>
  }

  export type TeacherUpdateWithoutNoteInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneWithoutTeacherInput
    relations?: Teacher_Course_StudentUpdateManyWithoutTeacherInput
  }

  export type TeacherUncheckedUpdateWithoutNoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    surname?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutTeacherInput
  }

  export type TeacherUpsertWithoutNoteInput = {
    update: XOR<TeacherUncheckedUpdateWithoutNoteInput, TeacherUpdateWithoutNoteInput>
    create: XOR<TeacherUncheckedCreateWithoutNoteInput, TeacherCreateWithoutNoteInput>
  }

  export type CourseUpdateWithoutNoteInput = {
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    relations?: Teacher_Course_StudentUpdateManyWithoutCourseInput
  }

  export type CourseUncheckedUpdateWithoutNoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: NullableStringFieldUpdateOperationsInput | string | null
    group?: BoolFieldUpdateOperationsInput | boolean
    relations?: Teacher_Course_StudentUncheckedUpdateManyWithoutCourseInput
  }

  export type CourseUpsertWithoutNoteInput = {
    update: XOR<CourseUncheckedUpdateWithoutNoteInput, CourseUpdateWithoutNoteInput>
    create: XOR<CourseUncheckedCreateWithoutNoteInput, CourseCreateWithoutNoteInput>
  }

  export type UserUpdateWithoutRoleInput = {
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUncheckedUpdateOneWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    login?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type Teacher_Course_StudentUpdateWithoutTeacherInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateManyWithoutRelationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NoteUpdateWithoutTeacherInput = {
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    course?: CourseUpdateOneRequiredWithoutNoteInput
  }

  export type NoteUncheckedUpdateWithoutTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUncheckedUpdateManyWithoutNoteInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
  }

  export type NoteUpdateWithoutCourseInput = {
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    teacher?: TeacherUpdateOneRequiredWithoutNoteInput
  }

  export type NoteUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type Teacher_Course_StudentUpdateWithoutCourseInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    student?: StudentUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    studentId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUpdateWithoutStudentInput = {
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    teacher?: TeacherUpdateOneRequiredWithoutRelationsInput
    course?: CourseUpdateOneRequiredWithoutRelationsInput
    consult?: ConsultUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUpdateManyWithoutRelationInput
  }

  export type Teacher_Course_StudentUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    courseId?: IntFieldUpdateOperationsInput | number
    subgroup?: NullableIntFieldUpdateOperationsInput | number | null
    consult?: ConsultUncheckedUpdateManyWithoutRelationInput
    journalEntry?: JournalEntryUncheckedUpdateManyWithoutRelationInput
    quaterMark?: QuaterMarkUncheckedUpdateManyWithoutRelationInput
  }

  export type ConsultUpdateWithoutRelationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultUncheckedUpdateWithoutRelationInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
  }

  export type ConsultUncheckedUpdateManyWithoutConsultInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
    year?: IntFieldUpdateOperationsInput | number
  }

  export type JournalEntryUpdateWithoutRelationInput = {
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    replacement?: ReplacementUpdateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedUpdateWithoutRelationInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    replacement?: ReplacementUncheckedUpdateOneWithoutJournalEntryInput
  }

  export type JournalEntryUncheckedUpdateManyWithoutJournalEntryInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QuaterMarkUpdateWithoutRelationInput = {
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
  }

  export type QuaterMarkUncheckedUpdateWithoutRelationInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
  }

  export type QuaterMarkUncheckedUpdateManyWithoutQuaterMarkInput = {
    id?: IntFieldUpdateOperationsInput | number
    mark?: StringFieldUpdateOperationsInput | string
    period?: EnumPeriodFieldUpdateOperationsInput | Period
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}