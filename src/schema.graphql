scalar Date

scalar Upload

type Query {
  fetchJournal(
    teacherId: Int!
    courseId: Int!
    date_gte: Date!
    date_lte: Date!
  ): [Teacher_Course_Student!]!
  fetchTeachers: [Teacher!]!
  fetchStudents: [Student!]!
  fetchCourses: [Course!]!
  fetchQuaterMarks(teacherId: Int, courseId: Int): [Teacher_Course_Student]
  fetchNotes(teacherId: Int, courseId: Int, period: String, year: Int): Note
  fetchReplacements(
    teacherId: Int
    courseId: Int
    date_gte: Date!
    date_lte: Date!
  ): [Teacher_Course_Student]

  fetchConsults(
    teacherId: Int
    courseId: Int
    period: String
    year: Int
  ): [Teacher_Course_Student]

  fetchSubgroups(courseId: Int, teacherId: Int): [Group]
  fetchFullInfo: FullInfo!
}

type Mutation {
  addStudent(
    name: String!
    surname: String!
    courseId: Int!
    teacherId: Int!
  ): Student!
  signup(login: String!, password: String!, roleId: Int!): AuthPayload
  signin(login: String!, password: String!): AuthPayload
  """
  TODO
  """
  updateJournal(data: JournalUpdateInput): Boolean
  """
  TODO
  """
  updateTeacher(data: TeacherInput): Teacher
  deleteTeacher(id: Int): Boolean
  updateStudent(data: StudentInput): Student
  deleteStudent(id: Int): Boolean
  updateCourse(data: CourseInput): Course
  deleteCourse(id: Int): Boolean
  createTeacher(data: TeacherInput): Teacher
  createStudent(data: StudentInput): Student
  createCourse(data: CourseInput): Course

  updateNote(data: NoteInput): Note
  deleteNote(id: Int): Boolean
  updateReplacements(data: [ReplacementInput]): [Replacement]
  deleteReplacements(ids: [Int]): Boolean
  updateConsults(data: [ConsultInput]): [Consult]
  deleteConsults(ids: [Int]): Boolean
  updateSubgroups(data: [SubgroupInput]): [Teacher_Course_Student]

  updateCourseRelations(teacher: Int, courses: [CourseRelationInput]): [Boolean]
  updateStudentRelations(
    teacher: Int
    course: Int
    students: [StudentRelationInput]
  ): [Boolean]
  uploadFromFile(type: String, file: Upload!): Boolean
}

type User {
  id: Int!
  roleId: Int!
  email: String!
  teacher: Teacher
}

type Teacher {
  id: Int!
  name: String
  surname: String
  userId: Int
  relations: [Teacher_Course_Student]
}

type Course {
  id: Int!
  name: String!
  relations: [Teacher_Course_Student]
  group: Boolean
}

type Student {
  id: Int!
  name: String
  surname: String
  class: Int
  program: String
  load: Int
  relations: [Teacher_Course_Student]
  subgroup: [Subgroup]
}

type Teacher_Course_Student {
  id: Int!
  teacher: Teacher!
  course: Course!
  student: Student
  subgroup: Int
  journalEntry: [JournalEntry]
  quaterMark: [QuaterMark]
  consult: [Consult]
  archived: Boolean
}

type JournalEntry {
  id: Int!
  mark: String!
  date: Date!
  relation: Teacher_Course_Student
  replacement: Replacement
}

type QuaterMark {
  id: Int!
  mark: String!
  period: String!
  relation: Teacher_Course_Student
}

type Consult {
  id: Int!
  date: Date!
  period: String!
  year: Int!
  relation: Teacher_Course_Student
}

type Replacement {
  id: Int!
  date: Date!
  journalEntry: JournalEntry
}

type Note {
  id: Int!
  text: String!
  period: String!
  year: Int!
  teacher: Teacher
  course: Course
}

type Subgroup {
  course: Course!
  student: Student!
  subgroup: Int
}

type Group {
  class: Int
  program: String
  relations: [Teacher_Course_Student]
}

input TeacherInput {
  id: Int
  name: String
  surname: String
}

input CourseInput {
  id: Int
  name: String
  group: Boolean
}

input StudentInput {
  id: Int
  name: String
  surname: String
  class: Int
  program: String
}

input Teacher_Course_StudentInput {
  id: Int
  teacherId: Int
  courseId: Int
  studentId: Int
}

input SubgroupInput {
  id: Int!
  subgroup: Int
}

input ConsultInput {
  id: Int!
  date: String!
  period: String!
  year: Int!
  relationId: Int!
}

input NoteInput {
  id: Int!
  text: String
  period: String
  year: Int
  teacherId: Int
  courseId: Int
}

input ReplacementInput {
  id: Int
  date: Date
  entryId: Int!
}

input JournalEntryInput {
  id: Int
  mark: String!
  date: Date!
  relationId: Int!
}

input QuaterMarkInput {
  id: Int
  mark: String!
  period: String!
  relationId: Int!
}

input JournalUpdateInput {
  updateCasual: [JournalEntryInput]
  updatePeriod: [QuaterMarkInput]
  deleteCasual: [Int]
  deletePeriod: [Int]
}

input CourseRelationInput {
  id: Int
  archived: Boolean
}

input StudentRelationInput {
  id: Int
  archived: Boolean
}

type AuthPayload {
  token: String
  user: User
}

type FullInfo {
  teachers: [Teacher]
  students: [Student]
  courses: [Course]
  relations: [Teacher_Course_Student]
}
