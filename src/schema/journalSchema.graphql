type IndividualJournalEntry {
    id: Int
    studentName: String
    studentClass: String
    marks: [Mark]
    quarterMarks: [QuarterMark]
}

type Mark {
    id: Int
    date: Date
    value: String
}

type QuarterMark {
    id: Int
    period: String
    value: String
}

type DatesRecord {
    month: String,
    dates: [Date]
}

type MarksByMonth {
    month: String,
    marks: [Mark]
}

type GroupJournalStudentRecord {
    id: Int
    studentName: String
    marksByMonth: [MarksByMonth]
    quarterMarks: [QuarterMark]
}

type GroupJournalEntry {
    subgroup: String
    months: [DatesRecord]
    students: [GroupJournalStudentRecord]
}

extend type Query {
    fetchIndividualJournal(
        course: Int!
        year: Int!
        dateGte: Date!
        dateLte: Date!
    ): [IndividualJournalEntry]
    fetchGroupJournal(
        course: Int!
        year: Int!
        period: Int!
        dateGte: Date!
        dateLte: Date!
    ): [GroupJournalEntry]
    fetchTeacherStudents(teacherId: Int!, year: Int!): [Student]
}

extend type Mutation {
    updateMark(
        id: Int!
        date: Date!
        value: String!
        relationId: Int
    ): Mark
    updateJournal(data: JournalUpdateInput): Boolean
}

input Teacher_Course_StudentInput {
    id: Int
    teacherId: Int
    courseId: Int
    studentId: Int
}

input JournalEntryInput {
    id: Int
    mark: String!
    date: Date!
    relationId: Int!
}

input QuaterMarkInput {
    id: Int
    mark: String!
    period: String!
    relationId: Int!
    year: Int
}

input JournalUpdateInput {
    updateCasual: [JournalEntryInput]
    updatePeriod: [QuaterMarkInput]
    deleteCasual: [Int]
    deletePeriod: [Int]
}